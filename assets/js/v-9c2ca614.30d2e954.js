(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[3621],{947:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-9c2ca614",path:"/webpack4/configuration/optimization/namedChunks&chunkIds&occurrenceOrder.html",title:"namedChunks, chunkIds, occurrenceOrder",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"配置项",slug:"配置项",children:[]},{level:2,title:"NaturalChunkOrderPlugin",slug:"naturalchunkorderplugin",children:[]},{level:2,title:"OccurrenceChunkOrderPlugin",slug:"occurrencechunkorderplugin",children:[]},{level:2,title:"NamedChunksPlugin",slug:"namedchunksplugin",children:[]}],filePathRelative:"webpack4/configuration/optimization/namedChunks&chunkIds&occurrenceOrder.md",git:{updatedTime:162722505e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},7965:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});var l=a(6252);const p=(0,l.uE)('<h1 id="namedchunks-chunkids-occurrenceorder" tabindex="-1"><a class="header-anchor" href="#namedchunks-chunkids-occurrenceorder" aria-hidden="true">#</a> namedChunks, chunkIds, occurrenceOrder</h1><h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h2><p>这几个配置项相互影响，chunkIds 为主，namedChunks、occurrenceOrder 为辅，因为配置 namedChunks 和 occurrenceOrder 只是为了确定 chunkIds。它的逻辑如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/* WebpackOptionsApply.js */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 默认值为 undefined</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.optimization.chunkIds;</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkIds </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 开启 occurrenceOrder 配置，生产环境为 true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.optimization.occurrenceOrder) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;total-size&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 开启 namedChunks 配置，开发环境为 true</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.optimization.namedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;named&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// fallback 方案</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkIds </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;natural&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkIds) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NaturalChunkOrderPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./optimize/NaturalChunkOrderPlugin&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NamedChunksPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./NamedChunksPlugin&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OccurrenceChunkOrderPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./optimize/OccurrenceChunkOrderPlugin&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (chunkIds) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;natural&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NaturalChunkOrderPlugin</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;named&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OccurrenceChunkOrderPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        prioritiseInitial: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedChunksPlugin</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;size&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OccurrenceChunkOrderPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        prioritiseInitial: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;total-size&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OccurrenceChunkOrderPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        prioritiseInitial: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">`webpack bug: chunkIds: ${</span><span style="color:#E1E4E8;">chunkIds</span><span style="color:#9ECBFF;">} is not implemented`</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>不同的值使用了不同的插件：</p><table><thead><tr><th style="text-align:left;">chunkIds</th><th style="text-align:right;">Plugins</th><th style="text-align:right;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&#39;natural&#39;</code></td><td style="text-align:right;"><code>NaturalChunkOrderPlugin</code></td><td style="text-align:right;">按照正常使用顺序给 chunk 分配 id</td></tr><tr><td style="text-align:left;"><code>&#39;named&#39;</code></td><td style="text-align:right;"><code>OccurrenceChunkOrderPlugin</code> 与 <code>NamedChunksPlugin</code></td><td style="text-align:right;">给 chunk 分配易于调试的 id</td></tr><tr><td style="text-align:left;"><code>&#39;size&#39;</code></td><td style="text-align:right;"><code>OccurrenceChunkOrderPlugin</code></td><td style="text-align:right;">出现在 initial chunk 次数最多的 chunk 最先分配 id</td></tr><tr><td style="text-align:left;"><code>&#39;total-size&#39;</code></td><td style="text-align:right;"><code>OccurrenceChunkOrderPlugin</code></td><td style="text-align:right;">出现在 initial 或者 async chunk 中次数最多的 chunk 最先分配 id</td></tr></tbody></table><p>具体看下各个插件的逻辑：</p><h2 id="naturalchunkorderplugin" tabindex="-1"><a class="header-anchor" href="#naturalchunkorderplugin" aria-hidden="true">#</a> NaturalChunkOrderPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NaturalChunkOrderPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tcompiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NaturalChunkOrderPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tcompilation.hooks.optimizeChunkOrder.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#9ECBFF;">&quot;NaturalChunkOrderPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t</span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>optimizeChunkOrder hook 触发的时机是在调用 compilation.seal 的时候。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">seal</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 每个 module 生成 id</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.beforeModuleIds.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modules);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.moduleIds.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modules);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">applyModuleIds</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 走进 NaturalChunkOrderPlugin 内部</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.optimizeChunkOrder.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 每个 chunk 生成 id</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.beforeChunkIds.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">applyChunkIds</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>可以看到先生成了 module id，接着走到 NaturalChunkOrderPlugin 内部，接着执行具体的逻辑：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 处理逻辑</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">chunks.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">chunkA</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chunkB</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkA.modulesIterable[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkB.modulesIterable[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对比两个 chunk 内部的 moduleId，例如：</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// chunkA = [module1, module2, module3]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// chunkB = [module4, module5, module6]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1 与 4 对比，如果有结果，返回排序</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 接着 2 与 3 对比，以此类推</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aItem.done </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> bItem.done) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aItem.done) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bItem.done) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aModuleId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aItem.value.id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bModuleId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bItem.value.id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleId </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bModuleId) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleId </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bModuleId) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span></code></pre></div><p>如果 chunk 含有的 module 的 id 越小或者含有的 module 数量越少会排在前面，在调用 this.applyChunkIds 的时候，排在前面的 chunkId 会更小，因为它是一个自增的数字。</p><h2 id="occurrencechunkorderplugin" tabindex="-1"><a class="header-anchor" href="#occurrencechunkorderplugin" aria-hidden="true">#</a> OccurrenceChunkOrderPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OccurrenceOrderChunkIdsPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 校验选项的合法性</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#B392F0;">validateOptions</span><span style="color:#E1E4E8;">(schema, options, </span><span style="color:#9ECBFF;">&quot;Occurrence Order Chunk Ids Plugin&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 布尔值</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">prioritiseInitial</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.prioritiseInitial;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tcompiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#9ECBFF;">&quot;OccurrenceOrderChunkIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\tcompilation.hooks.optimizeChunkOrder.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t</span><span style="color:#9ECBFF;">&quot;OccurrenceOrderChunkIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t\t</span><span style="color:#6A737D;">// ... handle</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>OccurrenceChunkOrderPlugin 的触发时机与 NaturalChunkOrderPlugin 一致，不过它支持 prioritiseInitial 配置，当 chunkIds 配置为 <code>&#39;named&#39; | &#39;total-size&#39;</code> 的时候，prioritiseInitial 为 false，为 <code>&#39;size&#39;</code> 的时候，prioritiseInitial 为 true，具体逻辑如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// handle</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">occursInInitialChunksMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">originalOrder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> occurs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> c.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 出现在 initial chunk 中的 chunk 会记录 occurs 变量</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.parentsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parent.</span><span style="color:#B392F0;">isInitial</span><span style="color:#E1E4E8;">()) occurs</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    occursInInitialChunksMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(c, occurs);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记录 chunks 的原始顺序</span></span>\n<span class="line"><span style="color:#E1E4E8;">    originalOrder.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(c, i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  chunks.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &#39;named&#39; | &#39;total-size&#39; 为 false</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// &#39;size&#39; 为 true</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (prioritiseInitial) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aEntryOccurs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> occursInInitialChunksMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(a);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bEntryOccurs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> occursInInitialChunksMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(b);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aEntryOccurs </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bEntryOccurs) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aEntryOccurs </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bEntryOccurs) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 对比两个 chunk 被引用的次数</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aOccurs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">getNumberOfGroups</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bOccurs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">getNumberOfGroups</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aOccurs </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bOccurs) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aOccurs </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bOccurs) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果两个 chunk 被引用的次数相同，那就按照 chunks 原有的顺序计算</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">orgA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> originalOrder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(a);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">orgB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> originalOrder.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(b);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> orgA </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> orgB;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"></span></code></pre></div>',18),o=(0,l.Uk)("什么是 chunkGroup、entrypoint，可以"),e=(0,l.Uk)("👇这里"),c=(0,l.Uk)("。"),E=(0,l.uE)('<p>prioritiseInitial 主要是用来对比两个 chunk 被 initial chunk 引用的次数，什么是 initial chunk，举个例子：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// index.js webpack 的入口文件</span></span>\n<span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;a&quot; */</span><span style="color:#9ECBFF;">&#39;./a.js</span><span style="color:#FDAEB7;font-style:italic;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// a.js</span></span>\n<span class="line"><span style="color:#E1E4E8;">export default a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>\n<span class="line"></span></code></pre></div><p>webpack 打包后，会有两个文件，一个是 <code>bundle.js</code>，一个是 <code>a.js</code>，<code>bundle.js</code> 就是由 initial chunk 生成的，<code>a.js</code> 就是由上述 import 语法而生成的 async chunk，所以在对比 a 这个 async chunk 的时候，由于它的 occurs 数量更大，在 this.applyChunkIds 的遍历 chunks 过程中，优先被分配 id。</p><h2 id="namedchunksplugin" tabindex="-1"><a class="header-anchor" href="#namedchunksplugin" aria-hidden="true">#</a> NamedChunksPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamedChunksPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultNameResolver</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nameResolver</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.nameResolver </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nameResolver </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> NamedChunksPlugin.defaultNameResolver;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tcompiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NamedChunksPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tcompilation.hooks.beforeChunkIds.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NamedChunksPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t\tchunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameResolver</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>webpack 内部使用 NamedChunksPlugin 是没有传 nameResolver，所以使用默认的 defaultNameResolver，说白了就是一个获取 chunk 名称的函数。</p><p>beforeChunkIds hook 触发的时机是上述的 optimizeChunkOrder hook 后一步，做的事情也很简单，就是将每个 chunk 的 id 都赋值成 name，后期调用 this.applyChunkIds 的时候，会跳过已经分配过 id 的 chunk。</p>',7),t={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("p",null,[o,(0,l.Wm)(a,{to:"/webpack4/term/entrypoint&chunkGroup.html"},{default:(0,l.w5)((()=>[e])),_:1}),c]),E],64)}}}}]);