(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[6180],{367:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-5bc8071e",path:"/webpack4/configuration/optimization/flagIncludedChunks.html",title:"flagIncludedChunks",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"FlagIncludedChunksPlugin",slug:"flagincludedchunksplugin",children:[]},{level:2,title:"handle",slug:"handle",children:[]}],filePathRelative:"webpack4/configuration/optimization/flagIncludedChunks.md",git:{updatedTime:162722505e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},6777:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const l=(0,a(6252).uE)('<h1 id="flagincludedchunks" tabindex="-1"><a class="header-anchor" href="#flagincludedchunks" aria-hidden="true">#</a> flagIncludedChunks</h1><p>flagIncludedChunks 配置专门用来标记作为子集的 chunks，因为当他们的父 chunks 加载完成了，它们就没必要加载了，在 production 环境下，该配置会开启，使用的是 FlagIncludedChunksPlugin 插件。</p><h2 id="flagincludedchunksplugin" tabindex="-1"><a class="header-anchor" href="#flagincludedchunksplugin" aria-hidden="true">#</a> FlagIncludedChunksPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlagIncludedChunksPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tcompiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;FlagIncludedChunksPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tcompilation.hooks.optimizeChunkIds.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#9ECBFF;">&quot;FlagIncludedChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t(</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t\t</span><span style="color:#6A737D;">// ... handle</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>optimizeChunkIds hook 的触发时机是在 compilation.seal 阶段，下面来看具体的逻辑：</p><h2 id="handle" tabindex="-1"><a class="header-anchor" href="#handle" aria-hidden="true">#</a> handle</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 第一步：给每个 module 分配对应的二进制，不同的 module 分配的值可能相同</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleBits</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WeakMap</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulesCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.modules.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> modulesCount, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulos</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  { length: </span><span style="color:#79B8FF;">31</span><span style="color:#E1E4E8;"> },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">pow</span><span style="color:#E1E4E8;">(modulo, i) </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> modulos[bit] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bit</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 对 1 的二进制位进行左移 bit 位</span></span>\n<span class="line"><span style="color:#E1E4E8;">  moduleBits.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> bit);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第二步：计算每个 chunk 的二进制值，它们是由所有的 moduleBit 按位或计算而来</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkModulesHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WeakMap</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunk.modulesIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    hash </span><span style="color:#F97583;">|=</span><span style="color:#E1E4E8;"> moduleBits.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  chunkModulesHash.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunk, hash);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第三步：遍历所有的 chunks，判断两个 chunk 是否有包含关系</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前 chunk 的 bitsvalue</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkAHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkModulesHash.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunkA);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前 chunk 的模块数量</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkAModulesCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkA.</span><span style="color:#B392F0;">getNumberOfModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkAModulesCount </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从当前 chunk 中找到最优 module 来做切入点</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最优 module 的特点是它被其他 chunk 引用的次数最少</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkA.modulesIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      bestModule </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">      bestModule.</span><span style="color:#B392F0;">getNumberOfChunks</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getNumberOfChunks</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      bestModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 内循环：遍历依赖当前 chunk 的最优 module 的所有 chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">loopB</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> bestModule.chunksIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 剔除自身 chunk，进行下一次 loopB</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkA </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> chunkB) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkBModulesCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkB.</span><span style="color:#B392F0;">getNumberOfModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是一个 empty chunk，进行下一次 loopB</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkBModulesCount </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 chunkA 的模块数量比 chunkB 的模块数量多，进行下一次 loopB</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkAModulesCount </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> chunkBModulesCount) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// is chunkA in chunkB?</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 进行按位与的操作</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkBHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkModulesHash.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunkB);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 chunkA 与 chunkB 内的 chunkModulesHash 不相同，进行下一次 loopB</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((chunkBHash </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> chunkAHash) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> chunkAHash) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 因为不同的 module 可能有相同的 moduleBit，</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 还是得具体判断 chunkB 是否包含 chunkA 所有的模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkA.modulesIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunkB.</span><span style="color:#B392F0;">containsModule</span><span style="color:#E1E4E8;">(m)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loopB</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// chunkA 是 chunkB 的子集</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 在 chunkB 生成代码的时候，会带有 chunkA 的 id</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这样做的好处是如果加载了 chunkB，再加载 chunkA 的时候，就不用额外的请求 chunkA 对应的 js 文件。</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkB.ids.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunkA.id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>上述的逻辑分为三步，第一步没看懂为什么要这么设计 module 的 bit，后续的逻辑倒是情理之中。</p><p>上面还涉及到 bitmasks 以及<strong>按位与</strong> <code>&amp;</code>、<strong>按位或</strong> <code>|</code>、<strong>左移</strong> <code>&lt;&lt;</code> 的操作。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 对 1 进行左移操作，比如 1 &lt;&lt; 2，从 &#39;001&#39;，就变成二进制 &#39;100&#39;，同理类推</span></span>\n<span class="line"><span style="color:#6A737D;">// 假设 chunkA 含有的 modules [m1, m2, m3], 对应的二进制 bit 是 [&#39;1&#39;, &#39;10&#39;, &#39;11&#39;]</span></span>\n<span class="line"><span style="color:#6A737D;">// 进行按位或操作，那么 chunkA 的 chunkAHash 是 &#39;11&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">// 假设 chunkB 含有的 modules [m1], 对应的二进制 bit 是 [&#39;1&#39;]</span></span>\n<span class="line"><span style="color:#6A737D;">// 进行按位或操作，那么 chunkB 的 chunkBHash 是 &#39;1&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">// 最后进行 chunkBHash &amp; chunkAHash 操作，就是 &#39;1&#39; 了。</span></span>\n<span class="line"></span></code></pre></div><p>看了原理，那么来看一个真实的场景，到底这个插件有什么用途：</p><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\tcontext: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\tentry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tentry: </span><span style="color:#9ECBFF;">&quot;./entry&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t},</span></span>\n<span class="line"><span style="color:#E1E4E8;">\toutput: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tpath: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tfilename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tpublicPath: </span><span style="color:#9ECBFF;">&#39;./dist/&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t},</span></span>\n<span class="line"><span style="color:#E1E4E8;">\toptimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tminimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>entry.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;async1&quot; */</span><span style="color:#9ECBFF;">&quot;./async1&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  require.</span><span style="color:#B392F0;">ensure</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;./a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;./b&quot;</span><span style="color:#E1E4E8;">], () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async2&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#9ECBFF;">&#39;async2&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>a 与 b.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// b.js</span></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;b&#39;</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 打包命令之后，在 dist 目录下生成了 <code>entry.js</code>、<code>async1.js</code>、<code>async2.js</code> 三个文件。</p><details class="custom-container details"><summary>dist/entry.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// install a JSONP callback for chunk loading</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moreModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// add &quot;moreModules&quot; to the modules object,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId, chunkId, i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, resolves </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> chunkIds.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tchunkId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkIds[i];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(installedChunks, chunkId) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> installedChunks[chunkId]) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tresolves.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunks[chunkId][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tinstalledChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(moduleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> moreModules) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(moreModules, moduleId)) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tmodules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moreModules[moduleId];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(parentJsonpFunction) </span><span style="color:#B392F0;">parentJsonpFunction</span><span style="color:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(resolves.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tresolves.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// object to store loaded and loading chunks</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// undefined = chunk not loaded, null = chunk preloaded/prefetched</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Promise = chunk loading, 0 = chunk loaded</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedChunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// script path function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsonpScriptSrc</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> __webpack_require__.p </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> ({</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;async1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;async2&quot;</span><span style="color:#E1E4E8;">}[chunkId]</span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;">chunkId) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.js&quot;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The require function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Check if module is in cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedModules[moduleId]) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> installedModules[moduleId].exports;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Create a new module (and put it into the cache)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\ti: moduleId,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tl: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\texports: {}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Execute the module function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\tmodules[moduleId].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, __webpack_require__);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Flag the module as loaded</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Return the exports of the module</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// This file contains only the entry chunk.</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The chunk loading function for additional chunks</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireEnsure</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promises </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// JSONP chunk loading for javascript</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedChunkData </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 0 means &quot;already installed&quot;.</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#6A737D;">// a Promise means &quot;currently loading&quot;.</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedChunkData) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tpromises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#6A737D;">// setup Promise in chunk cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\tinstalledChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [resolve, reject];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t});</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tpromises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> promise);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#6A737D;">// start chunk loading</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tscript.charset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tscript.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.nc) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\tscript.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nonce&quot;</span><span style="color:#E1E4E8;">, __webpack_require__.nc);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tscript.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsonpScriptSrc</span><span style="color:#E1E4E8;">(chunkId);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#6A737D;">// create error before stack unwound to get useful stacktrace later</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#B392F0;">onScriptComplete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t</span><span style="color:#6A737D;">// avoid mem leaks in IE.</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\tscript.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t</span><span style="color:#79B8FF;">clearTimeout</span><span style="color:#E1E4E8;">(timeout);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(chunk </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(chunk) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> errorType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (event.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;missing&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> event.type);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> realSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target.src;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\terror.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Loading chunk &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> chunkId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; failed.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">(&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> errorType </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> realSrc </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;)&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\terror.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ChunkLoadError&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\terror.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errorType;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\terror.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realSrc;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t\tchunk[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">](error);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t\tinstalledChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t\t</span><span style="color:#B392F0;">onScriptComplete</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;timeout&#39;</span><span style="color:#E1E4E8;">, target: script });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t}, </span><span style="color:#79B8FF;">120000</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tscript.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tdocument.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(promises);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the modules object (__webpack_modules__)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define getter function for harmony exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getter</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name)) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, get: getter });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define __esModule on exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag, { value: </span><span style="color:#9ECBFF;">&#39;Module&#39;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__esModule&#39;</span><span style="color:#E1E4E8;">, { value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// create a fake namespace object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 1: value is a module id, require it</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 2: merge all properties of value into the ns</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 4: return value when already ns object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 8|1: behave like require</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">mode</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.__esModule) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(ns);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(ns, </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, value: value });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value) __webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(ns, key, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value[key]; }.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, key));</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ns;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// getDefaultExport function for compatibility with non-harmony modules</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.__esModule </span><span style="color:#F97583;">?</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">]; } </span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModuleExports</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">; };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(getter, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, getter);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> getter;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Object.prototype.hasOwnProperty.call</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(object, property); };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// __webpack_public_path__</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./dist/&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// on error function for async loading</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">oe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) { console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err); </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err; };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> jsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> oldJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.push.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(jsonpArray);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \tjsonpArray.push </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webpackJsonpCallback;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \tjsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(jsonpArray[i]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parentJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldJsonpFunction;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Load entry module and return exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(__webpack_require__.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#6A737D;">/************************************************************************/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> ([</span></span>\n<span class="line"><span style="color:#6A737D;">/* 0 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* import() | async1 */</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(__webpack_require__.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* require.ensure | async2 */</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;async2&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, __webpack_require__)).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(__webpack_require__.oe)</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> ]);</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>dist/async1.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],[</span></span>\n<span class="line"><span style="color:#6A737D;">/* 0 */</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">/* 1 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> }),</span></span>\n<span class="line"><span style="color:#6A737D;">/* 2 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> }),</span></span>\n<span class="line"><span style="color:#6A737D;">/* 3 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony import */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _a__WEBPACK_IMPORTED_MODULE_0__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony import */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _b__WEBPACK_IMPORTED_MODULE_1__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">]]);</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>dist/async2.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],[</span></span>\n<span class="line"><span style="color:#6A737D;">/* 0 */</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">/* 1 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> }),</span></span>\n<span class="line"><span style="color:#6A737D;">/* 2 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">]]);</span></span>\n<span class="line"></span></code></pre></div></details><p>再在根目录下新建一个 index.html 测一测。</p><details class="custom-container details"><summary>index.html</summary><div class="language-html ext-html"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;Document&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./dist/entry.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span></code></pre></div></details><p>打开这个页面，你会神奇的发现 entry.js 代码逻辑里面请求 async2.js 的意图好像没有发生，其实这也就是 FlagIncludedChunksPlugin 的功劳，首先如果 async1.js 加载了，async2.js 有必要加载么？因为 async1 含有 async2 所有的模块，所以在 async1 这个 chunk 生成代码的时候，它会遍历 chunk.ids，生成如下的代码：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],</span><span style="color:#6A737D;">/* 省略*/</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"></span></code></pre></div><p>其中的 <code>[0, 1]</code> 就是在 FlagIncludedChunksPlugin 内部生成的，<code>0</code> 代表 <code>async1.js</code>, <code>1</code> 代表 <code>async2.js</code>，当 async1.js 加载完了之后，执行 <code>window[&quot;webpackJsonp&quot;].push</code> 其实是走进了 <code>dist/entry.js</code> 内部的 webpackJsonpCallback 函数，在这个函数内部会通过 installedChunks 记录 <code>async2</code> 这个 chunk 加载完成了。</p><p><strong>chunk 加载的目的只是为了把 modules 都存储到 entry.js 这个立即执行函数的 modules 对象上去</strong></p><p>由于 async1.js 已经加载完成，它包含了 async2.js 所有的模块，所以在执行 <code>__webpack_require__.e(/* require.ensure | async2 */ 1)</code> 的时候，发现 async2 这个 chunk 已经在 installedChunks 标记为加载完成的状态，因而不会再发送一个请求去加载 <code>async2.js</code>。</p>',25),p={render:function(s,n){return l}}}}]);