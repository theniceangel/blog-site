(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[6094],{5130:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-1f35d0be",path:"/webpack4/webpack-process/compiling-modules.html",title:"模块解析",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"SingleEntryPlugin",slug:"singleentryplugin",children:[]},{level:2,title:"compilation.addEntry()",slug:"compilation-addentry",children:[]},{level:2,title:"compilation._addModuleChain()",slug:"compilation-addmodulechain",children:[]}],filePathRelative:"webpack4/webpack-process/compiling-modules.md",git:{updatedTime:1631672877e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:2}]}}},2674:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>P});var l=a(6252);const p=(0,l.uE)('<h1 id="模块解析" tabindex="-1"><a class="header-anchor" href="#模块解析" aria-hidden="true">#</a> 模块解析</h1><p>webpack 需要配置 entry，这个是 webpack 的入口模块，通过入口模块，就能解析出所有的模块，而入口就在触发 make hook 的时候。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.make.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(compilation, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div>',3),o=(0,l.Uk)("在这个例子里面，钩入 make hook 的插件是 "),e=(0,l.Uk)("SingleEntryPlugin"),E=(0,l.Uk)("，当然也有可能是其他的插件，比如 "),c=(0,l.Uk)("MultiEntryPlugin"),t=(0,l.Uk)("、"),r=(0,l.Uk)("DynamicEntryPlugin"),y=(0,l.Uk)("，这些取决于 "),i=(0,l.Uk)("EntryOptionPlugin"),F=(0,l.Uk)("。"),d=(0,l.uE)('<h2 id="singleentryplugin" tabindex="-1"><a class="header-anchor" href="#singleentryplugin" aria-hidden="true">#</a> SingleEntryPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SingleEntryPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 省略其他代码</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.make.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;SingleEntryPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">entry</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成 singleEntryDependency</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SingleEntryPlugin.</span><span style="color:#B392F0;">createDependency</span><span style="color:#E1E4E8;">(entry, name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加 entry</span></span>\n<span class="line"><span style="color:#E1E4E8;">        compilation.</span><span style="color:#B392F0;">addEntry</span><span style="color:#E1E4E8;">(context, dep, name, callback);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createDependency</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">entry</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SingleEntryDependency</span><span style="color:#E1E4E8;">(entry);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    dep.loc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { name };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dep;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div>',2),B=(0,l.Uk)("具体 SingleEntryPlugin 的分析，请👇"),u=(0,l.Uk)("这里"),m=(0,l.Uk)("，接着就是执行 "),h=(0,l.Wm)("code",null,"compilation.addEntry",-1),g=(0,l.Uk)("。"),k=(0,l.uE)('<h2 id="compilation-addentry" tabindex="-1"><a class="header-anchor" href="#compilation-addentry" aria-hidden="true">#</a> compilation.addEntry()</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// context：执行 webpack 的上下文路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// entry： dependency</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// name：入口模块的名称，默认是 main</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addEntry</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">entry</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发 addEntry hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.addEntry.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(entry, name);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      module: </span><span style="color:#79B8FF;">null</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entry </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleDependency</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      slot.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.request;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 判断是否有重名的入口模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._preparedEntrypoints.</span><span style="color:#B392F0;">findIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> slot.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idx </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果存在就直接覆盖</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._preparedEntrypoints[idx] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._preparedEntrypoints.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(slot);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 开始递归分析所有的模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_addModuleChain</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      entry,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 保存入口模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entries.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 所有的模块已经分析完成</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果出错，触发 failedEntry 钩子</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.failedEntry.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(entry, name, err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果成功解析入口模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          slot.module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._preparedEntrypoints.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(slot);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idx </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._preparedEntrypoints.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(idx, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 触发 succeedEntry hook，因为从入口开始已经解析出了所有的模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.succeedEntry.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(entry, name, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p><code>compilation.addEntry</code> 包含了整个模块解析的过程，而 <code>this._addModuleChain</code> 则是递归分析所有模块的入口。</p><h2 id="compilation-addmodulechain" tabindex="-1"><a class="header-anchor" href="#compilation-addmodulechain" aria-hidden="true">#</a> compilation._addModuleChain()</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">_addModuleChain</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dependency</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onModule</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 配置了 profile 选项</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.profile </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">currentProfile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.profile </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// this.bail 为 true 的话，出现 error，第一时间退出 webpack 构建</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 否则会将 errors 存到 compilation.errors 上，等到构建完成之后，打印在命令行</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">errorAndCallback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.bail</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          err.dependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [dependency];</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.errors.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dependency 参数必须是 Dependency 实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> dependency </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">      dependency </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">dependency.</span><span style="color:#79B8FF;">constructor</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Parameter &#39;dependency&#39; must be a Dependency&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Dep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{DepConstructor}</span><span style="color:#6A737D;"> */</span><span style="color:#E1E4E8;"> (dependency.</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.dependencyFactories.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Dep);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// dependency 必须要有对应的 moduleFactory</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">moduleFactory) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">`No dependency factory available for this dependency type: ${</span><span style="color:#E1E4E8;">dependency</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">constructor</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 控制并发任务的信号机</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semaphore.</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 调用 moduleFactory 生成对应的 module</span></span>\n<span class="line"><span style="color:#E1E4E8;">      moduleFactory.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          contextInfo: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            issuer: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            compiler: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.compiler.name</span></span>\n<span class="line"><span style="color:#E1E4E8;">          },</span></span>\n<span class="line"><span style="color:#E1E4E8;">          context: context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          dependencies: [dependency]</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semaphore.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">errorAndCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">EntryModuleNotFoundError</span><span style="color:#E1E4E8;">(err));</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> afterFactory;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentProfile) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            afterFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            currentProfile.factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> afterFactory </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">addModuleResult</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> addModuleResult.module;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">onModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          dependency.module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addReason</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, dependency);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterBuild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (addModuleResult.dependencies) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">processModuleDependencies</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              });</span></span>\n<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (addModuleResult.issuer) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentProfile) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.profile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentProfile;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (addModuleResult.build) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">buildModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semaphore.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">errorAndCallback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentProfile) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">afterBuilding</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Date</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">                currentProfile.building </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> afterBuilding </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> afterFactory;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semaphore.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">afterBuild</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            });</span></span>\n<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.semaphore.</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">waitForBuildingFinished</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, afterBuild);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;"> }</span></span>\n<span class="line"></span></code></pre></div>',5),b=(0,l.Uk)("_addModuleChain 接收 dependency，这样就能通过 "),f=(0,l.Wm)("code",null,"dependency-moduleFactory-module",-1),A=(0,l.Uk)(" 这样的链路生成对应类型的 module，这三者的联系可以查阅 "),D=(0,l.Uk)("dependency&moduleFactory"),w=(0,l.Uk)("。在生成 module 的时候，内部会有一个叫 semaphore 的东西，它的作用是控制构建模块的并发任务的数量，"),v=(0,l.Wm)("strong",null,"每一个 module 的构建都是存在异步操作的",-1),x=(0,l.Uk)("，这样能尽可能的减少模块构建的时间。所以来看下 semaphore 的实现。"),C=(0,l.uE)('<details class="custom-container details"><summary>lib/util/</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Semaphore</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">available</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 任务的最大并发量</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> available;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 等待执行的任务队列</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.waiters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._continue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._continue.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 手动执行任务，或者将任务放入待执行列表</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">acquire</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.waiters.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(callback);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 释放任务，并且尝试从待执行的任务队列取出任务并执行</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">release</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.waiters.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tprocess.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._continue);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#B392F0;">_continue</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.waiters.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.available</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.waiters.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\t</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></details><p>Semaphore 的实现特别的简单而且有效，想一想如果没有这么一个控制并发任务的信号机，webpack 构建 module 都是串行的话，那随着模块数量的增加，以及模块内容的增多，构建的时间会大幅度的上升。</p>',2),P={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("p",null,[o,(0,l.Wm)(a,{to:"/webpack4/internal-plugins/entry/SingleEntryPlugin.html"},{default:(0,l.w5)((()=>[e])),_:1}),E,(0,l.Wm)(a,{to:"/webpack4/internal-plugins/entry/MultiEntryPlugin.html"},{default:(0,l.w5)((()=>[c])),_:1}),t,(0,l.Wm)(a,{to:"/webpack4/internal-plugins/entry/DynamicEntryPlugin.html"},{default:(0,l.w5)((()=>[r])),_:1}),y,(0,l.Wm)(a,{to:"/webpack4/internal-plugins/entry/EntryOptionPlugin.html"},{default:(0,l.w5)((()=>[i])),_:1}),F]),d,(0,l.Wm)("p",null,[B,(0,l.Wm)(a,{to:"/webpack4/internal-plugins/entry/SingleEntryPlugin.html"},{default:(0,l.w5)((()=>[u])),_:1}),m,h,g]),k,(0,l.Wm)("p",null,[b,f,A,(0,l.Wm)(a,{to:"/webpack4/term/dependency&moduleFactory.html"},{default:(0,l.w5)((()=>[D])),_:1}),w,v,x]),C],64)}}}}]);