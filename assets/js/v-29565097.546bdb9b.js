(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[1460],{4549:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-29565097",path:"/webpack4/module-resolver/",title:"引言",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"webpack4/module-resolver/README.md",git:{updatedTime:1628438767e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},4992:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});var l=a(6252);const e=(0,l.uE)('<h1 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h1><p>webpack 中路径的解析是非常关键的，因为在代码当中你可以使用如下的语法来引入 module。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> foo </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;path/to/module&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">// or</span></span>\n<span class="line"><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/module&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span></code></pre></div><p>对于 webpack，它怎么知道 <code>&#39;path/to/module&#39;</code> 路径对应的是哪个文件。</p><p>再比如 loaders 的配置：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">      {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        oneOf: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">          {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resourceQuery:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">inline</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// foo.css?inline</span></span>\n<span class="line"><span style="color:#E1E4E8;">            use: </span><span style="color:#9ECBFF;">&#39;url-loader&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          },</span></span>\n<span class="line"><span style="color:#E1E4E8;">          {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resourceQuery:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">external</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// foo.css?external</span></span>\n<span class="line"><span style="color:#E1E4E8;">            use: </span><span style="color:#9ECBFF;">&#39;file-loader&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><p>它怎么知道 <code>&#39;url-loader&#39;</code> 以及 <code>&#39;file-loader&#39;</code> 的路径是什么呢？</p>',7),p=(0,l.Uk)("webpack 使用 "),o={href:"https://github.com/webpack/enhanced-resolve",target:"_blank",rel:"noopener noreferrer"},c=(0,l.Uk)("enhanced-resolve"),r=(0,l.Uk)(" 来找到这些目标的绝对路径，webpack v4.46.0 使用的是 v4.5.0 版本的 enhanced-resolve。下面来具体分析 enhanced-resolve 底层的实现。"),t={render:function(s,n){const a=(0,l.up)("OutboundLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[e,(0,l.Wm)("p",null,[p,(0,l.Wm)("a",o,[c,(0,l.Wm)(a)]),r])],64)}}}}]);