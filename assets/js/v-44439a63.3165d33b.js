(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[4967],{1807:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-44439a63",path:"/webpack4/configuration/recordsPath&recordsInputPath&recordsOutputPath.html",title:"recordsPath, recordsInputPath, recordsOutputPath",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"recordsPath",slug:"recordspath",children:[]},{level:2,title:"recordsPath 底层实现",slug:"recordspath-底层实现",children:[]},{level:2,title:"RecordIdsPlugin",slug:"recordidsplugin",children:[]},{level:2,title:"recordsInputPath, recordsOutputPath",slug:"recordsinputpath-recordsoutputpath",children:[]},{level:2,title:"demo",slug:"demo",children:[]}],filePathRelative:"webpack4/configuration/recordsPath&recordsInputPath&recordsOutputPath.md",git:{updatedTime:162746788e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},8256:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const l=(0,a(6252).uE)('<h1 id="recordspath-recordsinputpath-recordsoutputpath" tabindex="-1"><a class="header-anchor" href="#recordspath-recordsinputpath-recordsoutputpath" aria-hidden="true">#</a> recordsPath, recordsInputPath, recordsOutputPath</h1><h2 id="recordspath" tabindex="-1"><a class="header-anchor" href="#recordspath" aria-hidden="true">#</a> recordsPath</h2><p>使用该配置来告诉 webpack 生成包含 webpack modules、chunks 信息的 JSON 文件，这对于多次构建非常有用，使用如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  recordsPath: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;records.json&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><h2 id="recordspath-底层实现" tabindex="-1"><a class="header-anchor" href="#recordspath-底层实现" aria-hidden="true">#</a> recordsPath 底层实现</h2><p>在 <code>webpack.js</code> 里有这么一段逻辑：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// webpack.js</span></span>\n<span class="line"><span style="color:#E1E4E8;">compiler.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsApply</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(options, compiler)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// WebpackOptionsApply</span></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsApply</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptionsApply</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 解析 recordsPath</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.recordsInputPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.recordsInputPath </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> options.recordsPath;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.recordsOutputPath </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options.recordsOutputPath </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> options.recordsPath;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>这样 compiler 实例上就有 <code>recordsInputPath</code>、<code>recordsOutputPath</code> 三个属性了，默认值都是 <code>options.recordsPath</code>，在执行 <code>compiler.run</code> 的时候，会调用 <code>compiler.readRecords</code> 来获取上一次构建的信息，接着才开始调用 <code>compile</code> 方法进行构建。代码如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onCompiled</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.beforeRun.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.run.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">readRecords</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(onCompiled);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 读取记录</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">readRecords</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果没有设置 recordsPath 或者 recordsInputPath</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsInputPath) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputFileSystem.</span><span style="color:#B392F0;">stat</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsInputPath, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果当前 JSON 文件还未生成</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputFileSystem.</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsInputPath, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 已经存在了 JSON 文件，获取内容</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parseJson</span><span style="color:#E1E4E8;">(content.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          e.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Cannot parse records: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> e.message;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(e);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p><code>readRecords</code> 执行过后，会通过 <code>recordsInputPath</code>，获取上一次构建信息，并且存到 <code>this.records</code> 上面，在 compiler 实例化 compilation 的时候，会将 records 赋值给 compilation。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newCompilation</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createCompilation</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> compilation;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>真正用到 <code>compilation.records</code> 的时机是在调用 <code>compilation.seal</code> 的时候。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">seal</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shouldRecord</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.shouldRecord.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取上一次构建记录中所有 modules 的信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.reviveModules.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modules, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取上一次构建记录中所有 chunks 的信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.reviveChunks.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 缓存这一次构建的记录</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (shouldRecord) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.recordModules.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.modules, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.recordChunks.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunks, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>首先通过 <code>reviveModules</code> 与 <code>reviveChunks</code> hooks 获取上一次构建记录，再通过 <code>recordModules</code> 与 <code>recordChunks</code> hooks 存储这一次构建记录。这四个 hooks 都会走进 RecordIdsPlugin 插件逻辑的内部，下面就是重中之重的 RecordIdsPlugin 分析。</p><h2 id="recordidsplugin" tabindex="-1"><a class="header-anchor" href="#recordidsplugin" aria-hidden="true">#</a> RecordIdsPlugin</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RecordIdsPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">portableIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.portableIds;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;RecordIdsPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.recordModules.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RecordIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ... recordModulesHandler</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.reviveModules.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RecordIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ... reviveModulesHandler</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.recordChunks.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RecordIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ... recordChunksHandler</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.reviveChunks.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RecordIdsPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.chunks) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usedIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.chunks.byName) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.id </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.name) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> records.chunks.byName[chunk.name];</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedIds.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(id)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              chunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.chunks.bySource) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChunkSources</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> sources) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> records.chunks.bySource[source];</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedIds.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(id)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                chunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(records.chunks.usedIds)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            compilation.usedChunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(records.chunks.usedIds);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>插件内部可以分为 <code>recordModulesHandler</code>、<code>reviveModulesHandler</code>、<code>recordChunksHandler</code>、<code>reviveChunksHandler</code> 这四个函数，下面一一分析：</p><ul><li><p><strong>recordModulesHandler</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/* recordModulesHandler */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建对应的默认值</span></span>\n<span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * {</span></span>\n<span class="line"><span style="color:#6A737D;"> *   modules: {</span></span>\n<span class="line"><span style="color:#6A737D;"> *     byIdentifier: {},</span></span>\n<span class="line"><span style="color:#6A737D;"> *     usedIds: {}</span></span>\n<span class="line"><span style="color:#6A737D;"> *   }</span></span>\n<span class="line"><span style="color:#6A737D;"> * }</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.modules) records.modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.modules.byIdentifier) records.modules.byIdentifier </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.modules.usedIds) records.modules.usedIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 module id 不是数字</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 portableIds 为 true，identifier 则是相对路径，否则是绝对路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> portableIds</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> identifierUtils.</span><span style="color:#B392F0;">makePathsRelative</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        compiler.context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        compilation.cache</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 id</span></span>\n<span class="line"><span style="color:#E1E4E8;">  records.modules.byIdentifier[identifier] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  records.modules.usedIds[</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>reviveModulesHandler</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/* reviveModulesHandler */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.modules) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">// 获取上一次的 byIdentifier 记录的 moduleId </span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.modules.byIdentifier) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usedIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// module id 已经存在，直接跳过</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">identifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> portableIds</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> identifierUtils.</span><span style="color:#B392F0;">makePathsRelative</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          compiler.context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">          compilation.cache</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> records.modules.byIdentifier[identifier];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedIds.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(id)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 分配 module id</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// records.modules.usedIds 为数组？貌似没有这种场景</span></span>\n<span class="line"><span style="color:#6A737D;">// 从 recordModulesHandler 的逻辑来看， usedIds 是一个对象</span></span>\n<span class="line"><span style="color:#6A737D;">// 有上面的逻辑足够了，这段代码没有也不会影响整体逻辑</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(records.modules.usedIds)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  compilation.usedModuleIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(records.modules.usedIds);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>recordChunksHandler</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/* recordChunksHandler */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// makePathsRelative 就是为了将绝对路径转化成相对路径</span></span>\n<span class="line"><span style="color:#6A737D;">// 比如 module.identifier() 是 &#39;/Users/webpack-demo/index.js&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">// compiler.context 是 &#39;/Users/webpack-demo/&#39;</span></span>\n<span class="line"><span style="color:#6A737D;">// 处理过后是 &#39;index.js&#39;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModuleIdentifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (portableIds) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> identifierUtils.</span><span style="color:#B392F0;">makePathsRelative</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compiler.context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.cache</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChunkSources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunk.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">index</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkGroup.chunks.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是具名的 chunkGroup，就记录 chunkGroup 的信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkGroup.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      sources.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} ${</span><span style="color:#E1E4E8;">chunkGroup</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果是匿名的 chunkGroup，就记录对应的 origin</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 比如 import(&#39;./a.js&#39;)，会生成一个匿名的 chunkGroup，其中 a.js 模块就是它的 origin</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.origins) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (origin.module) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (origin.request) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            sources.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} ${</span><span style="color:#B392F0;">getModuleIdentifier</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">module</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">} ${</span></span>\n<span class="line"><span style="color:#9ECBFF;">                </span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">request</span></span>\n<span class="line"><span style="color:#9ECBFF;">              </span><span style="color:#9ECBFF;">}`</span></span>\n<span class="line"><span style="color:#E1E4E8;">            );</span></span>\n<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> origin.loc </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            sources.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} ${</span><span style="color:#B392F0;">getModuleIdentifier</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">module</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">} ${</span></span>\n<span class="line"><span style="color:#9ECBFF;">                </span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">loc</span></span>\n<span class="line"><span style="color:#9ECBFF;">              </span><span style="color:#9ECBFF;">}`</span></span>\n<span class="line"><span style="color:#E1E4E8;">            );</span></span>\n<span class="line"><span style="color:#E1E4E8;">          } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">            origin.loc </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> origin.loc </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            origin.loc.start</span></span>\n<span class="line"><span style="color:#E1E4E8;">          ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            sources.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">index</span><span style="color:#9ECBFF;">} ${</span><span style="color:#B392F0;">getModuleIdentifier</span><span style="color:#9ECBFF;">(</span></span>\n<span class="line"><span style="color:#9ECBFF;">                </span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">module</span></span>\n<span class="line"><span style="color:#9ECBFF;">              )</span><span style="color:#9ECBFF;">} ${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">origin</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">loc</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">start</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}`</span></span>\n<span class="line"><span style="color:#E1E4E8;">            );</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> sources;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 创建对应的默认值</span></span>\n<span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * {</span></span>\n<span class="line"><span style="color:#6A737D;"> *   chunks: {</span></span>\n<span class="line"><span style="color:#6A737D;"> *     byName: {},</span></span>\n<span class="line"><span style="color:#6A737D;"> *     bySource: {}</span></span>\n<span class="line"><span style="color:#6A737D;"> *     usedIds: []</span></span>\n<span class="line"><span style="color:#6A737D;"> *   }</span></span>\n<span class="line"><span style="color:#6A737D;"> * }</span></span>\n<span class="line"><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.chunks) records.chunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.chunks.byName) records.chunks.byName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.chunks.bySource) records.chunks.bySource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usedIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果 chunk id 不是数字</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> chunk.id </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// name 与 id 的映射</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (name) records.chunks.byName[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// source 与 id 的映射</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChunkSources</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> sources) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    records.chunks.bySource[source] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 存下已经用过的 chunk id</span></span>\n<span class="line"><span style="color:#E1E4E8;">  usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk.id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">records.chunks.usedIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(usedIds).</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>reviveChunksHandler</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/* reviveChunksHandler */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">records.chunks) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usedIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">// 通过 name 获取上一次的 id</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.chunks.byName) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.id </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.name) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> records.chunks.byName[chunk.name];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedIds.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(id)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 通过 source 获取上一次的 id</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (records.chunks.bySource) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getChunkSources</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> sources) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> records.chunks.bySource[source];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedIds.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(id)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      usedIds.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 记录所有已经用过的 chunkId</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(records.chunks.usedIds)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  compilation.usedChunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(records.chunks.usedIds);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li></ul><p>这四个函数两两搭配使用，目的就是为了记录构建流程中产生的 moduleId 以及 chunkId，所有的信息都存在 <code>compilation.records</code> 对象上面，它也就是 <code>compiler.records</code> 的引用，在输出完 webpack 的 静态资源之后，会调用 <code>compiler.emitRecords</code>，存储这次构建的信息。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">emitRecords</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idx1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idx2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath.</span><span style="color:#B392F0;">lastIndexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> recordsOutputPathDirectory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取 recordsJSON 文件的目录</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idx1 </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> idx2) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      recordsOutputPathDirectory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, idx1);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idx1 </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> idx2) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      recordsOutputPathDirectory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, idx2);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建对应 JSON 文件</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputFileSystem.</span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        callback</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果目录存在，则直接写入内容</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">recordsOutputPathDirectory) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 否则递归创建路径，再写入内容</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputFileSystem.</span><span style="color:#B392F0;">mkdirp</span><span style="color:#E1E4E8;">(recordsOutputPathDirectory, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">writeFile</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><h2 id="recordsinputpath-recordsoutputpath" tabindex="-1"><a class="header-anchor" href="#recordsinputpath-recordsoutputpath" aria-hidden="true">#</a> recordsInputPath, recordsOutputPath</h2><p>上面的代码逻辑每次构建都是覆盖修改同一份文件，无法知道两次构建之间发生了哪些变化。但是你可以搭配使用 <code>recordsInputPath</code> 、<code>recordsOutputPath</code> 来记录前后两次构建的信息，</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  recordsInputPath: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;records.json&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 包含前一次构建的信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">  recordsOutputPath: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;newRecords.json&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 包含这次构建的信息</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><p><strong>以上的行为只能消费一次</strong>，除非你手动的把 <code>newRecords.json</code> 文件的内容拷贝至 <code>records.json</code>，这才能进行下一次的比对，因此绝大部分情况下只用配置 <code>recordsPath</code> 就可以。</p><p>从 RecordIdsPlugin 的实现来看，不管有没有配置 recordsPath, recordsInputPath, 以及 recordsOutputPath 等等，webpack 内部都会通过 <code>compiler.records</code> 来记录这次构建的 chunkId 以及 moduleId 信息，只不过有了这些配置可以控制是否写入磁盘，来对比多次构建之间有哪些异同之处。</p><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> demo</h2><p>下面以一个生动活泼的例子来看看生成的 JSON 文件是怎样的。</p><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\tcontext: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\tentry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">\toutput: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tfilename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  recordsPath: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;records.json&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index module&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 命令之后，因为第一次没有 recordsPath 的 json 文件，所以 <code>reviveModulesHandler</code>、<code>reviveChunksHandler</code> 两个 hooks 的逻辑只是给 <code>compiler.records</code> 设置默认值，最后生成的 <code>records.json</code> 文件内容如下：</p><div class="language-json ext-json"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;modules&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;byIdentifier&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;usedIds&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;0&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;chunks&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;byName&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;bySource&quot;</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;0 index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;usedIds&quot;</span><span style="color:#E1E4E8;">: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>下次再运行 webpack 打包命令，就可以消费上述的 JSON 文件，这样可以保证在多次运行打包命令之间，模块 id 和 chunk id 是稳定的，不会受到其他影响而变化。这种影响包括<strong>新增 module，导致其他的 module id 发生变化，而引起所有的 chunks 变化</strong>，这个问题在早期的 commonChunksPlugins 出现过。</p>',32),p={render:function(s,n){return l}}}}]);