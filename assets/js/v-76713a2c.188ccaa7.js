(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[1588],{4291:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-76713a2c",path:"/webpack4/configuration/output/filename.html",title:"filename",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"webpack4/configuration/output/filename.md",git:{updatedTime:162746788e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},3674:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>c});var l=a(6252);const e=(0,l.uE)('<h1 id="filename" tabindex="-1"><a class="header-anchor" href="#filename" aria-hidden="true">#</a> filename</h1><p>该选项决定了每一个输出的 js 文件名称。它的配置有多种形式，比如</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 不适合多个 entry</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[name].bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用 entry 的 name</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[id].bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用 chunk id</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[hash].bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用每次构建的 hash</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[chunkhash].bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用基于 chunk 内容生成的 hash</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;[contenthash].bundle.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用基于提取的内容生成的 hash, 比如 ExtractTextWebpackPlugin</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 提供一个返回 filename 的函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: (</span><span style="color:#FFAB70;">chunkData</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunkData.chunk.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[name].js&#39;</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[name]/[name].js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 提供一个路径也可以</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;js/[name]/bundle.js&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div>',3),p=(0,l.Uk)("webpack 内部利用 "),o=(0,l.Uk)("TemplatedPathPlugin"),t=(0,l.Uk)(" 实现上述的占位符变量功能。"),c={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[e,(0,l.Wm)("p",null,[p,(0,l.Wm)(a,{to:"/webpack4/configuration/internal-plugins/TemplatedPathPlugin.html#assetpath"},{default:(0,l.w5)((()=>[o])),_:1}),t])],64)}}}}]);