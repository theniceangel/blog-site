(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[5051],{4403:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-0ba0e53c",path:"/webpack4/module-resolver/Resolver.html",title:"Resolver",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"hooks",slug:"hooks",children:[]},{level:2,title:"方法",slug:"方法",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"webpack4/module-resolver/Resolver.md",git:{updatedTime:1629683489e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:3}]}}},9024:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>C});var l=a(6252);const p=(0,l.uE)('<h1 id="resolver" tabindex="-1"><a class="header-anchor" href="#resolver" aria-hidden="true">#</a> Resolver</h1><p>Resolver 类是解析文件路径最核心的类，它的作用相当于调度中心，用来衔接不同插件的解析流程。</p><p>它位于 enhanced-resolve 文件夹的 <code>lib/Resolver.js</code>，结构如下：</p><details class="custom-container details"><summary>lib/Resolver.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fileSystem</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fileSystem;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      resolveStep: </span><span style="color:#B392F0;">withName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolveStep&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;hook&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">])),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      noResolve: </span><span style="color:#B392F0;">withName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;noResolve&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">])),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      resolve: </span><span style="color:#B392F0;">withName</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;resolve&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;resolveContext&quot;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;result&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;resolveContext&quot;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 兼容 webpack3</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._pluginCompat.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Resolver: before/after&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">before-</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(options.name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.stage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">after-</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(options.name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.stage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._pluginCompat.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Resolver: step hooks&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stepHook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">resolve(-s</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">S)tep</span><span style="color:#F97583;">$|^</span><span style="color:#DBEDFF;">no(-r</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">R)esolve</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stepHook) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.async </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.fn;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolverContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">innerCallback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">          };</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> resolverContext) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            innerCallback[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resolverContext[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          fn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, request, innerCallback);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        };</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></details><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h2><p>Resolver 内置以下的 hooks。</p>',6),o=(0,l.Wm)("strong",null,[(0,l.Wm)("code",null,"resolveStep")],-1),e=(0,l.Uk)("："),E=(0,l.Uk)("SyncHook"),t=(0,l.Wm)("strong",null,[(0,l.Wm)("code",null,"noResolve")],-1),c=(0,l.Uk)("："),r=(0,l.Uk)("SyncHook"),y=(0,l.Wm)("strong",null,[(0,l.Wm)("code",null,"resolve")],-1),F=(0,l.Uk)("："),i=(0,l.Uk)("AsyncSeriesBailHook"),B=(0,l.Wm)("strong",null,[(0,l.Wm)("code",null,"result")],-1),u=(0,l.Uk)("："),h=(0,l.Uk)("AsyncSeriesHook"),k=(0,l.uE)('<h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><ul><li><strong>ensureHook</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 确保实例上存在对应的 hooks，并且返回</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCamelCase</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 name 包含 &#39;before&#39; 或者 &#39;after&#39;，就注册前置 tap 回调钩子函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">before</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ).</span><span style="color:#B392F0;">withOptions</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stage: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">after</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ensureHook</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ).</span><span style="color:#B392F0;">withOptions</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stage: </span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks[name];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hook) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withName</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;resolveContext&quot;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hook;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>可以通过这个方法，往 resolver 上添加更多的 hooks，添加的 hooks 都是 <code>AsyncSeriesBailHook</code> 类型。</p><p>// TODO before 与 after 的解释，要与 tapable 的 stage 和 withOptions 一起</p><ul><li><strong>getHook</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取对应 hook，如果不存则就抛出异常</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getHook</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCamelCase</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">before</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getHook</span><span style="color:#E1E4E8;">(name[</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">withOptions</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stage: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">after</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getHook</span><span style="color:#E1E4E8;">(name[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toLowerCase</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> name.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">withOptions</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stage: </span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks[name];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hook) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Hook ${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} doesn&#39;t exist`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hook;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li><strong>parse</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">identifier</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (identifier </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">part</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\trequest: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tquery: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tmodule: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tdirectory: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tfile: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 解析请求中是否带有 &#39;?a=1&#39; 这样的 query</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idxQuery</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idxQuery </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tpart.query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (idxQuery </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tpart.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, idxQuery);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tpart.query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(idxQuery);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tpart.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> identifier;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (part.request) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断模块请求，比如 import &#39;vue&#39;，import &#39;vue/lib/xxx.js&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      part.module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isModule</span><span style="color:#E1E4E8;">(part.request);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 判断目录请求，比如 import &#39;vue/lib/&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tpart.directory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">(part.request);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (part.directory) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t\tpart.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> part.request.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, part.request.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> part;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>对一个请求路径进行 parse。</p><ul><li><strong>isDirectory</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">REGEXP_DIRECTORY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">i</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 请求的结尾不能含有 &#39;/&#39; 或者 &#39;\\&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">REGEXP_DIRECTORY</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(path);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li><strong>join</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cacheEntry;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pathCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> memoizedJoin.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(path);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> pathCache </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tmemoizedJoin.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(path, (pathCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">()));</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\tcacheEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pathCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(request);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> cacheEntry </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;undefined&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cacheEntry;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tcacheEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">memoryFsJoin</span><span style="color:#E1E4E8;">(path, request);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\tpathCache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(request, cacheEntry);</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cacheEntry;</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>join 方法为了拼接 path 和 request，比如模块请求是 <code>./a.js</code>，而搜寻的 path 是 <code>/Users/webpack-demo/</code>，得到的全路径就是 <code>/Users/webpack-demo/a.js</code>。方法内部为了性能会做缓存。</p><ul><li><strong>resolveSync, resolve, doResolve</strong></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Resolver</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 同步版本的 resolve</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolveSync</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> err,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      sync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(context, path, request, {}, (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      sync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">sync)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Cannot &#39;resolveSync&#39; because the fileSystem is not sync. Use &#39;resolve&#39;!&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> err;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 异步版本的 resolve，解析绝对路径的入口函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolveContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> callback </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deprecatedResolveContextInCallback</span><span style="color:#E1E4E8;">(resolveContext);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// END</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      context: context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      path: path,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request: request</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;resolve &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39; in &#39;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&#39;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 开始触发插件的逻辑，从 resolve hooks 开始</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">doResolve</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.resolve,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      obj,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      message,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        missing: resolveContext.missing,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        stack: resolveContext.stack</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果成功解析</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">err </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> result) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            result.path </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> result.path </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (result.query </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            result</span></span>\n<span class="line"><span style="color:#E1E4E8;">          );</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">localMissing</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        localMissing.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deprecatedPushToMissing</span><span style="color:#E1E4E8;">(localMissing, item);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果解析出问题，那再重新解析一次，并且将错误 msg 都存入 log</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">doResolve</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.resolve,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          obj,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          message,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolveContext.log) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                resolveContext.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"><span style="color:#E1E4E8;">              log.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(msg);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            },</span></span>\n<span class="line"><span style="color:#E1E4E8;">            missing: localMissing,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            stack: resolveContext.stack</span></span>\n<span class="line"><span style="color:#E1E4E8;">          },</span></span>\n<span class="line"><span style="color:#E1E4E8;">          (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> message);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            error.details </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> log.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            error.missing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(localMissing);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 解析失败触发 noResolve hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.noResolve.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj, error);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(error);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">doResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolveContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> callback </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deprecatedResolveContextInCallback</span><span style="color:#E1E4E8;">(resolveContext);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 兼容 hook 传字符串的情况</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toCamelCase</span><span style="color:#E1E4E8;">(hook);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hook </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deprecatedHookAsString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks[name]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">hook) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`Hook &quot;${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}&quot; doesn&#39;t exist`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// END</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> callback </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;callback is not a function &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">resolveContext)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;resolveContext is not an object &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stackLine</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hook.name </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;: (&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      request.path </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;) &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (request.request </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (request.query </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (request.directory </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; directory&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (request.module </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStack;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolveContext.stack) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newStack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(resolveContext.stack);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolveContext.stack.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(stackLine)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">recursionError</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;Recursion in resolving</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">Stack:</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(newStack).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  &quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">        );</span></span>\n<span class="line"><span style="color:#E1E4E8;">        recursionError.recursion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (resolveContext.log)</span></span>\n<span class="line"><span style="color:#E1E4E8;">          resolveContext.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abort resolving because of recursion&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(recursionError);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newStack.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(stackLine);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newStack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">([stackLine]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 每次调用 doResolve 都会触发 resolveStep hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.resolveStep.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(hook, request);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hook.</span><span style="color:#B392F0;">isUsed</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">innerContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createInnerContext</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          log: resolveContext.log,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          missing: resolveContext.missing,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          stack: newStack</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        message</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 触发 target hook 的 taps 回调函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 每一次都将 callback 包裹在匿名回调里面，形成层层包裹的效果，类似于套娃的过程</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 执行最外层的匿名回调函数，会一层层剥开内部的结构，一层层调用 callback</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hook.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(request, innerContext, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>这几个方法是最核心的方法，一般是调用 <code>resolver.resolve</code> 异步方法来发起解析路径的流程。<code>resolveSync</code> 是同步方法，而 <code>resolver.doResolve</code> 是为了将执行流程推向下一个插件，并且记录解析路径时遇到的插件而形成的堆栈信息。用下面一张图来解释下大概的过程。</p>',18),d=(0,l.uE)('<p>在调用 <code>resolver.resolve</code> 的时候，其实就是对 callback 进行<strong>套娃</strong>的过程，等到调用最外层的 callback 的时候，就是不断<strong>剥开娃娃</strong>的过程，最后调用的就是最开始传递给 <code>resolver.resolver</code> 的 callback 函数，再一次回到 webpack 的构建流程。</p><p>在<strong>套娃</strong>的过程中就是各个插件对路径处理的过程，不断的给 resolve 函数里面的 <code>obj</code> 对象增加更多的数据，最后返回给 webpack。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>',3),m=(0,l.Uk)("Resolver 只是起到 resolve 发起的作用，真正投入使用还是得使用很多插件，定制好一个 pipeline，最后开始解析路径，这些工作，都放到了 "),q=(0,l.Uk)("ResolverFactory"),v=(0,l.Uk)("。"),C={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("ul",null,[(0,l.Wm)("li",null,[o,e,(0,l.Wm)(a,{to:"/webpack4/tapable/SyncHook.html"},{default:(0,l.w5)((()=>[E])),_:1})]),(0,l.Wm)("li",null,[t,c,(0,l.Wm)(a,{to:"/webpack4/tapable/SyncHook.html"},{default:(0,l.w5)((()=>[r])),_:1})]),(0,l.Wm)("li",null,[y,F,(0,l.Wm)(a,{to:"/webpack4/tapable/AsyncSeriesBailHook.html"},{default:(0,l.w5)((()=>[i])),_:1})]),(0,l.Wm)("li",null,[B,u,(0,l.Wm)(a,{to:"/webpack4/tapable/AsyncSeriesHook.html"},{default:(0,l.w5)((()=>[h])),_:1})])]),k,(0,l.Wm)("img",{src:s.$withBase("/assets/enhanced-resolve-callback.png")},null,8,["src"]),d,(0,l.Wm)("p",null,[m,(0,l.Wm)(a,{to:"/webpack4/module-resolver/ResolverFactory.html"},{default:(0,l.w5)((()=>[q])),_:1}),v])],64)}}}}]);