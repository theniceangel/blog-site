(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[3009],{2187:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>o});const o={key:"v-e43b8eb2",path:"/sourcemap/",title:"sourcemap",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"mappings",slug:"mappings",children:[]},{level:2,title:"base64-VLQ",slug:"base64-vlq",children:[]},{level:2,title:"sourceMappingURL 与 sourceURL",slug:"sourcemappingurl-与-sourceurl",children:[]}],filePathRelative:"sourcemap/README.md",git:{updatedTime:163965705e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:3}]}}},4264:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>C});var o=a(6252);const e=(0,o.uE)('<h1 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap" aria-hidden="true">#</a> sourcemap</h1><p>sourcemap 是从已转换的代码映射到原始源的文件，能够帮助浏览器在调试转换的代码的时候，重现原始源。</p><p>文件格式以 <code>.map</code> 结尾，格式如下：</p><div class="language-json ext-json"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 版本</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;file&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;bundle.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 转换后的文件名称</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;sourceRoot&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// source 的根路径，可选值，拼接 sources 字段的最前面</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;sources&quot;</span><span style="color:#E1E4E8;">: [ </span><span style="color:#6A737D;">// 源文件列表，可能存在多个</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;index.js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;sourcesContent&quot;</span><span style="color:#E1E4E8;">: [ </span><span style="color:#6A737D;">// 源文件的内容，可选值，如果上述的 source 找不到，会依赖这个字段</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;console.log(1);&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;names&quot;</span><span style="color:#E1E4E8;">: [], </span><span style="color:#6A737D;">// mappings 使用到的 names 变量</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;mappings&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;;;;CAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 包含映射关系的数据</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>该例子通过 rollup 打包。</p><details class="custom-container details"><summary>bundle.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">\t</span><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">\tconsole.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">}());</span></span>\n<span class="line"><span style="color:#6A737D;">//# sourceMappingURL=bundle.js.map</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div></details><h2 id="mappings" tabindex="-1"><a class="header-anchor" href="#mappings" aria-hidden="true">#</a> mappings</h2><p>mappings 的规则如下：</p><ul><li><p><strong>通过 <code>;</code> 分割生成文件的每一行(line)</strong></p></li><li><p><strong>通过 <code>,</code> 分割每一行的每个独立部分(segment)，比如以上的 <code>console</code>，<code>.</code>，<code>log</code> 等等</strong></p></li><li><p><strong>每一个独立部分(segment)可能由 1个，4个或者5个 base64 字符组成，甚至可能拥有更多数量的字符</strong></p></li></ul><p>独立部分的每个 base64 字符的含义：</p><ul><li><p><strong>第一个</strong></p><p><strong>代表生成文件的列号</strong>，每一行的第一个 segment 的列号是<strong>绝对位置</strong>，同一行的其他 segment 都是基于它的相对位置，这样做的好处是减少了 sourcemap 文件的体积，不过在极端情况下，比如<strong>前后 segment 的列号相差很大</strong>，一个 base64 的字符单元就不够用了，这样每一个独立部分拥有的字符就超过了 5 个。</p></li><li><p><strong>第二个</strong></p><p>在 <code>sources</code> 字段的索引值，代表这个部分属于哪个文件的代码，一般在合成文件的时候会用到，它也是相对值。</p></li><li><p><strong>第三个</strong></p><p><strong>代表原始文件的行号</strong>，每个 segment 的行号都是基于它前一个 segment 的行号求相对值，这样做也是为了减少 sourcemap 的文件体积。</p><blockquote><p>如果 sources 有多个元素，每当遍历至新文件的时候，相对值就是新文件的行号与上一个文件最后的 mapping 的行号差值。比如 <code>a.js</code> 最后一个 mapping 的行号是 100， <code>b.js</code> 的第一个 mapping 的行号是 1，那么第三个值就是 -99，转化成 base64 编码单元就是 nG。</p></blockquote></li><li><p><strong>第四个</strong></p><p><strong>代表原始文件的列号</strong>，每个 segment 的列号都是基于它前一个 segment 的列号求相对值，<strong>向右偏移为正数，向左偏移为负数</strong>。</p></li><li><p><strong>第五个</strong></p><p><code>names</code> 数组的索引。</p></li></ul><h2 id="base64-vlq" tabindex="-1"><a class="header-anchor" href="#base64-vlq" aria-hidden="true">#</a> base64-VLQ</h2>',12),l=(0,o.Uk)("根据 "),p=(0,o.Uk)("base64"),c=(0,o.Uk)(" 的索引表，可以得到如下的位置关系："),r=(0,o.uE)('<div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mappings</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;;;;CAAA(2|0|0|0),OAAO(14|0|0|14),CAAC(2|0|0|2),GAAG(6|0|0|6),CAAC(2|0|0|2),CAAC(2|0|0|2),CAAC(2|0|0|2);;;;;;&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>括号里面的位置关系是怎么计算得来的呢？这里就牵涉到 <strong>base64-VLQ</strong> 编码了。</p><p>VLQ 是使用任意位数的二进制来表示一个任意大的数字的一种编码方式，它的原理如下：</p><p>VLQ 利用 6 个比特进行存储，其中第一位表示<strong>是否连续(<code>1 为连续，0为不连续</code>)</strong>，最后一位表示<strong>正负数(<code>1 为负数，0为正数</code>)</strong>。也就是只有中间 4 位是用来表示大小的，可以看出一个单元可以代表的范围值是 [-15, 15]，我从网上找了一个图，来进一步阐述内部的规则。</p>',4),t=(0,o.uE)('<ol><li>对于数字 7 来说，因为它落在 [-15, 15] 之间，直接把它的二进制放在中间四位即可，得到的 vlq 的值就是 <code>001110</code>，转化成十进制就是 <code>parseInt(&#39;001110&#39;, 2) -&gt; 14</code>，再查 base64 的编码表，也就是 <code>字母O</code>；</li><li>对于数字 1200 来说，它的二进制是 <code>10010110000</code>，明显一个编码单元不够表示，所以先取<strong>后四位</strong>，也就是图上的<strong>内容1</strong>，放到 vlq 的<strong>第一个编码单元</strong>的<strong>中间四位</strong>，同时<strong>第一个编码单元</strong>的<strong>第一位</strong>是 <code>1</code> 表示后面还有编码单元。<strong>最后一位</strong>是 <code>0</code> 表示这是一个正数。接着取图上的<strong>内容2</strong>，它是 5 个比特（<strong>如果不够5位，直接高位补0</strong>），直接把它放到<strong>第二个编码单元</strong>的最后，并且在第一位补上<strong>1</strong>，表示后面还有编码单元，因为第一个编码单元的最后一位已经表示了<strong>正负数</strong>，所以第二个编码单元只需要用第一位表示<strong>是否连续</strong>即可，同理，第三个编码单元也是这样。最后这三个编码单元的二进制都转化成十进制就变成了 <code>32|43|2</code>，再查 base64 的编码表，也就是 <code>grC</code>；</li><li>对于数字 -17 来说，它的二进制是 <code>-10001</code>，先取绝对值变成 <code>10001</code>，因为它是负数，所以<strong>第一个编码单元</strong>的最后一位就是 <code>1</code>，最后两个编码单元得到的 base64 值就是 <code>jB</code></li></ol><p>因此回到上述的例子：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mappings</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;;;;CAAA(2|0|0|0),OAAO(14|0|0|14),CAAC(2|0|0|2),GAAG(6|0|0|6),CAAC(2|0|0|2),CAAC(2|0|0|2),CAAC(2|0|0|2);;;;;;&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>将上述的 base64 反解至 VLQ 编码之前的值就得到真实的位置映射关系了。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mappings</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;;;;CAAA(1|0|0|0),OAAO(7|0|0|7),CAAC(1|0|0|1),GAAG(3|0|0|3),CAAC(1|0|0|1),CAAC(1|0|0|1),CAAC(1|0|0|1);;;;;;&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">mappings 开始有三个分号，代表生成文件的第四行才能映射到源文件，前三行都是凭空生成的，无法映射</span></span>\n<span class="line"><span style="color:#6A737D;">// 第一个 CAAA 代表 生成文件的第四行（生成文件的第二列|index.js|源文件的第一行|源文件的第一列）</span></span>\n<span class="line"><span style="color:#6A737D;">// 第二个 OAAO 代表 生成文件的第四行（生成文件的第九列|index.js|源文件的第一行|源文件的第八列）</span></span>\n<span class="line"><span style="color:#6A737D;">// ...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">注意：从 </span><span style="color:#79B8FF;">OAAO</span><span style="color:#E1E4E8;"> 开始，生成文件的列号是相对于前一个 segment 计算偏移量的，每次换行，列号都会重新计算绝对值。</span></span>\n<span class="line"><span style="color:#E1E4E8;">源文件的行号与列号都是相对于前一个 segment 计算偏移量的，不会受换行的影响</span></span>\n<span class="line"></span></code></pre></div>',5),i=(0,o.Uk)("这里有个 "),E={href:"https://www.murzwin.com/base64vlq.html",target:"_blank",rel:"noopener noreferrer"},g=(0,o.Uk)("playground"),u=(0,o.Uk)(" 可以把 mappings 放进去，得到位置映射关系。"),d=(0,o.uE)('<h2 id="sourcemappingurl-与-sourceurl" tabindex="-1"><a class="header-anchor" href="#sourcemappingurl-与-sourceurl" aria-hidden="true">#</a> sourceMappingURL 与 sourceURL</h2><p>sourceMappingURL 一般用在源文件的最后面，形式如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// js 文件的形式如下</span></span>\n<span class="line"><span style="color:#6A737D;">//# sourceMappingURL=&lt;url&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// css 文件的形式如下</span></span>\n<span class="line"><span style="color:#6A737D;">/*# sourceMappingURL=&lt;url&gt; */</span></span>\n<span class="line"></span></code></pre></div><p>url 可以是一个链接地址，也可以是一个 data URI，搭配 <code>sourcesContent</code> 使用。</p><p>sourceURL 一般是用于 <code>eval</code> 场景，它的形式如下：</p><div class="language-text ext-text"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#e1e4e8;">//@ sourceURL=&lt;url&gt;\n</span></span></code></pre></div>',6),y=(0,o.Uk)("具体的解释可以阅读"),A={href:"http://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/",target:"_blank",rel:"noopener noreferrer"},m=(0,o.Uk)("这篇文章"),C={render:function(s,n){const a=(0,o.up)("RouterLink"),C=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.j4)(o.HY,null,[e,(0,o.Wm)("p",null,[l,(0,o.Wm)(a,{to:"/sourcemap/base64.html"},{default:(0,o.w5)((()=>[p])),_:1}),c]),r,(0,o.Wm)("img",{src:s.$withBase("/assets/vlq-demo.svg"),align:"center"},null,8,["src"]),t,(0,o.Wm)("p",null,[i,(0,o.Wm)("a",E,[g,(0,o.Wm)(C)]),u]),d,(0,o.Wm)("p",null,[y,(0,o.Wm)("a",A,[m,(0,o.Wm)(C)])])],64)}}}}]);