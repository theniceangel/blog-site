(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[8420],{7257:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-e2029d32",path:"/webpack4/internal-plugins/TemplatedPathPlugin.html",title:"TemplatedPathPlugin",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"类声明",slug:"类声明",children:[]},{level:2,title:"assetPath",slug:"assetpath",children:[]},{level:2,title:"globalHash",slug:"globalhash",children:[]},{level:2,title:"hashForChunk",slug:"hashforchunk",children:[]}],filePathRelative:"webpack4/internal-plugins/TemplatedPathPlugin.md",git:{updatedTime:1630856917e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:2}]}}},7166:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const l=(0,a(6252).uE)('<h1 id="templatedpathplugin" tabindex="-1"><a class="header-anchor" href="#templatedpathplugin" aria-hidden="true">#</a> TemplatedPathPlugin</h1><p>webpack 使用一种 <code>&#39;substitutions&#39;</code> 的技术，支持 <code>output.filename</code>、<code>output.chunkFilename</code> 等配置，它可以使用如下的占位符来替换构建流程中对应的值。</p><table><thead><tr><th>template</th><th>作用</th></tr></thead><tbody><tr><td>[hash]</td><td>module id 的哈希值</td></tr><tr><td>[contenthash]</td><td>文件内容的哈希</td></tr><tr><td>[chunkhash]</td><td>chunk 内容的哈希值</td></tr><tr><td>[name]</td><td>模块名称</td></tr><tr><td>[id]</td><td>module id</td></tr><tr><td>[query]</td><td>module 的 query，<code>&#39;?&#39;</code> 之后的值</td></tr><tr><td>[function]</td><td>返回 filename 的函数</td></tr></tbody></table><h2 id="类声明" tabindex="-1"><a class="header-anchor" href="#类声明" aria-hidden="true">#</a> 类声明</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TemplatedPathPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mainTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.mainTemplate;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      mainTemplate.hooks.assetPath.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        replacePathVariables</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      mainTemplate.hooks.globalHash.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">paths</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      mainTemplate.hooks.hashForChunk.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">hash</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>TemplatedPathPlugin 内部含有许多正则，都是为了匹配占位符变量。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 全局匹配版本</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">REGEXP_HASH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">hash(?::(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">))</span><span style="color:#F97583;">?</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [hash] 或者 [hash:数字]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_CHUNKHASH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">chunkhash(?::(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">))</span><span style="color:#F97583;">?</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [chunkhash] 或者 [chunkhash:数字]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_MODULEHASH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">modulehash(?::(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">))</span><span style="color:#F97583;">?</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [modulehash] 或者 [modulehash:数字]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_CONTENTHASH</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">contenthash(?::(</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">))</span><span style="color:#F97583;">?</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [contenthash] 或者 [contenthash:数字]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_NAME</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">name</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [name]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_ID</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">id</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [id]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_MODULEID</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">moduleid</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [moduleid]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_FILE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">file</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [file]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_QUERY</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">query</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [query]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_FILEBASE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">filebase</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// \b匹配 [filebase]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">url</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// \b匹配 [url]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 非全局匹配版本</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">REGEXP_HASH_FOR_TEST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_HASH</span><span style="color:#E1E4E8;">.source, </span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_CHUNKHASH_FOR_TEST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_CHUNKHASH</span><span style="color:#E1E4E8;">.source, </span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_CONTENTHASH_FOR_TEST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_CONTENTHASH</span><span style="color:#E1E4E8;">.source, </span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">REGEXP_NAME_FOR_TEST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_NAME</span><span style="color:#E1E4E8;">.source, </span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span></code></pre></div><p>插件的主要逻辑分为 <code>assetPath</code>、<code>globalHash</code>、<code>hashForChunk</code> 三个 hooks，下面分别看看这三个 hooks 的作用。</p><h2 id="assetpath" tabindex="-1"><a class="header-anchor" href="#assetpath" aria-hidden="true">#</a> assetPath</h2><p>assetPath 是用了替换 <code>output.filename</code>、<code>output.path</code> 等配置内的占位符变量。它的调用路径如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getPath</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认为 compilation.hash</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.hash </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// filename：带有占位符的模版字符串</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mainTemplate.</span><span style="color:#B392F0;">getAssetPath</span><span style="color:#E1E4E8;">(filename, data);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getPathWithInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.hash </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.mainTemplate.</span><span style="color:#B392F0;">getAssetPathWithInfo</span><span style="color:#E1E4E8;">(filename, data);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainTemplate</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getPublicPath</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.assetPath.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputOptions.publicPath </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      options</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getAssetPath</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.assetPath.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(path, options);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getAssetPathWithInfo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">assetInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">newPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.assetPath.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(path, options, assetInfo);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { path: newPath, info: assetInfo };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>先来看下 <code>replacePathVariables</code> 函数的逻辑。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 返回一个 replacer 函数</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">allowEmpty</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// replacer 函数会将 value 替换成对应的字符串模版，比如 value 为 &#39;index&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 比如 &#39;[name].js&#39; 替换成  &#39;index.js&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args[args.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">allowEmpty) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">`Path variable ${</span><span style="color:#E1E4E8;">match</span><span style="color:#9ECBFF;">} not implemented in this context: ${</span><span style="color:#E1E4E8;">input</span><span style="color:#9ECBFF;">}`</span></span>\n<span class="line"><span style="color:#E1E4E8;">        );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`${</span><span style="color:#B392F0;">escapePathVariables</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">escapePathVariables</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">[\\w:]</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;[</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">$1</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">]&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 返回一个闭包 fn</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">withHashLength</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">replacer</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">handlerFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">assetInfo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这个 fn 作为 string.replace 的第二个参数，主要是处理 &#39;[hash:16]&#39;, &#39;[chunkhash: 16]&#39; 类似模版</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">match</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">hashLength</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (assetInfo) assetInfo.immutable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hashLength </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parseInt</span><span style="color:#E1E4E8;">(hashLength, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (length </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> handlerFn) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handlerFn</span><span style="color:#E1E4E8;">(length);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">replacer</span><span style="color:#E1E4E8;">(match, hashLength, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> hash.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, length) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> hash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">replacePathVariables</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">assetInfo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.chunk;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 替换 [id]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.id;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// \b替换 [name]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (chunk.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> chunk.id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 替换 [chunkhash]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (chunk.renderedHash </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> chunk.hash);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 [chunkhash:number] 后面的 number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkHashWithLength</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.hashWithLength;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contentHashType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.contentHashType;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 替换 [contenthash]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contentHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (chunk </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.contentHash </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.contentHash[contentHashType]) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data.contentHash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 [contenthash:number] 后面的 number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contentHashWithLength</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (chunk </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.contentHashWithLength </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.contentHashWithLength[contentHashType]) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data.contentHashWithLength;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.module;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 替换 [moduleid]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 替换 [modulehash]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.renderedHash </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hash);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理 [modulehash:number] 后面的 number</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleHashWithLength</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.hashWithLength;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    data.noChunkHash </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#79B8FF;">REGEXP_CHUNKHASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(path) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">REGEXP_CONTENTHASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(path))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">`Cannot use [chunkhash] or [contenthash] for chunk in &#39;${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">}&#39; (use [hash] instead)`</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">path</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">REGEXP_HASH</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">withHashLength</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(data.hash), data.hashWithLength, assetInfo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">REGEXP_CHUNKHASH</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">withHashLength</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(chunkHash), chunkHashWithLength, assetInfo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">REGEXP_CONTENTHASH</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">withHashLength</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(contentHash),</span></span>\n<span class="line"><span style="color:#E1E4E8;">          contentHashWithLength,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          assetInfo</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">REGEXP_MODULEHASH</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">withHashLength</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(moduleHash), moduleHashWithLength, assetInfo)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_ID</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(chunkId))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_MODULEID</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(moduleId))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_NAME</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(chunkName))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_FILE</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(data.filename))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_FILEBASE</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(data.basename))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_QUERY</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(data.query, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">REGEXP_URL</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">getReplacer</span><span style="color:#E1E4E8;">(data.url))</span></span>\n<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\[\\\\</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#F97583;">*</span><span style="color:#79B8FF;">[\\w:]</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">)</span><span style="color:#85E89D;font-weight:bold;">\\\\\\]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gi</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;[$1]&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><h2 id="globalhash" tabindex="-1"><a class="header-anchor" href="#globalhash" aria-hidden="true">#</a> globalHash</h2><p>globalHash hook 的触发时机是在 <code>compilation.mainTemplate.useChunkHash</code> 的时候：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JavascriptModulesPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  compilation.mainTemplate.hooks.renderManifest.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;JavascriptModulesPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">useChunkHash</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.mainTemplate.</span><span style="color:#B392F0;">useChunkHash</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          compilation.mainTemplate.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">            hash,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            chunk,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            moduleTemplates.javascript,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            dependencyTemplates</span></span>\n<span class="line"><span style="color:#E1E4E8;">          ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        filenameTemplate,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        pathOptions: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          noChunkHash: </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">useChunkHash,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          contentHashType: </span><span style="color:#9ECBFF;">&quot;javascript&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        identifier: </span><span style="color:#9ECBFF;">`chunk${</span><span style="color:#E1E4E8;">chunk</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        hash: useChunkHash </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> chunk.hash </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fullHash</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MainTemplate</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useChunkHash</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">paths</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.globalHashPaths.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">([]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.globalHash.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(chunk, paths);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TemplatedPathPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mainTemplate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.mainTemplate;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      mainTemplate.hooks.globalHash.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;TemplatedPathPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">paths</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> mainTemplate.outputOptions;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">publicPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outputOptions.publicPath </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filename</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outputOptions.filename </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkFilename</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">            outputOptions.chunkFilename </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> outputOptions.filename;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// publicPath 只能含有 [hash]，这个hash 是 compilation 上的 hash</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">REGEXP_HASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(publicPath) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 以下的情况不会出现</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">REGEXP_CHUNKHASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(publicPath) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">REGEXP_CONTENTHASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(publicPath) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">REGEXP_NAME_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(publicPath)</span></span>\n<span class="line"><span style="color:#E1E4E8;">          )</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果 filename 含有 [hash]， mainTemplate.useChunkHash() 返回 false</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">REGEXP_HASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(filename)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果 chunkFilename 含有 [hash]， mainTemplate.useChunkHash() 返回 false</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">REGEXP_HASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(chunkFilename)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果 mainTemplate.hooks.globalHashPaths 返回的 path 含有 [hash]，</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// mainTemplate.useChunkHash() 返回 false</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">REGEXP_HASH_FOR_TEST</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(paths.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;|&quot;</span><span style="color:#E1E4E8;">))) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div></div><p><code>pathOptions.noChunkHash</code> 用来判断 <code>filenameTemplate</code> 是否可以含有 <code>[chunkhash]</code>、<code>[contenthash]</code> 这样的占位符。<code>hash</code> 用于 <code>compilation.cache</code> 对象内部</p><h2 id="hashforchunk" tabindex="-1"><a class="header-anchor" href="#hashforchunk" aria-hidden="true">#</a> hashForChunk</h2><p>// TODO</p>',19),p={render:function(s,n){return l}}}}]);