(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[1957],{9100:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-e1df4740",path:"/webpack4/term/chunk.html",title:"chunk",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"initial chunk",slug:"initial-chunk",children:[]},{level:2,title:"runtime chunk",slug:"runtime-chunk",children:[]},{level:2,title:"async chunk",slug:"async-chunk",children:[]},{level:2,title:"关于 chunk 的类",slug:"关于-chunk-的类",children:[]}],filePathRelative:"webpack4/term/chunk.md",git:{updatedTime:162722505e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:2}]}}},9503:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>S});var l=a(6252);const p=(0,l.Wm)("h1",{id:"chunk",tabindex:"-1"},[(0,l.Wm)("a",{class:"header-anchor",href:"#chunk","aria-hidden":"true"},"#"),(0,l.Uk)(" chunk")],-1),o=(0,l.Uk)("webpack 输出资源都是以 chunk 为纬度，chunk 是由 "),e=(0,l.Uk)("module"),E=(0,l.Uk)(" 组成，chunk 的类型也分很多种，生成的代码也大有不同。"),t={class:"table-of-contents"},c=(0,l.Uk)("initial chunk"),r=(0,l.Uk)("runtime chunk"),y=(0,l.Uk)("async chunk"),i=(0,l.Uk)("关于 chunk 的类"),F=(0,l.Wm)("h2",{id:"initial-chunk",tabindex:"-1"},[(0,l.Wm)("a",{class:"header-anchor",href:"#initial-chunk","aria-hidden":"true"},"#"),(0,l.Uk)(" initial chunk")],-1),u=(0,l.Uk)("initial chunk 一般指的是由 "),d=(0,l.Uk)("entryModule"),B=(0,l.Uk)(" 解析出来的所有 modules 组成的 chunk，initial chunk 是取决于 webpack entry 的配置，举个例子："),h=(0,l.uE)('<div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: [</span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;./b.js&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 对应一个名称为 main 的 chunk，类型是 initial</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 对应一个名称为 main 的 chunk，类型是 initial</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: { </span><span style="color:#6A737D;">// 存在两个 initial chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    a: </span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 名称为 a 的 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    b: </span><span style="color:#9ECBFF;">&#39;./b.js&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 名称为 b 的 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 动态入口取决于返回值</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// main chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;./b.js&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// a chunk, b chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>可以看出 initial chunk 的生成是由入口 module 决定的，但是有没有其他的方式生成 initial chunk？</p>',2),A=(0,l.Uk)("通过 "),D=(0,l.Uk)("splitChunks"),m=(0,l.Uk)(" 配置也可以生成 initial chunk。"),k=(0,l.uE)('<p>换句话来说，<strong>从 initial chunk 中分离出去的 modules 组成的 chunk，也是 initial chunk</strong>，它们的特点是<strong>需要自己手动通过 script 标签引入</strong>，不过 HtmlWebpackPlugin 插件可以替你完成这些琐碎的任务，举个例子：</p><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  context: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#9ECBFF;">&quot;./index&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: { </span><span style="color:#6A737D;">// 将 react 抽离出来</span></span>\n<span class="line"><span style="color:#E1E4E8;">        vendors: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunks: </span><span style="color:#9ECBFF;">&#39;initial&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minSize: </span><span style="color:#79B8FF;">5000</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 打包命令之后，会在 dist 下面生成 <code>index.js</code> 与 <code>vendors-index.js</code> 两个文件，在 webpack 内部，他们分别对应 name 为 <code>index</code> 和 name 为 <code>vendors-index</code> 的 initial chunk。</p><p>vendors-index chunk 的由来是因为 index chunk 含有 react module，但是通过 <code>splitChunks</code>，我们将 react 分离出来了，形成了 vendors-index chunk。</p><h2 id="runtime-chunk" tabindex="-1"><a class="header-anchor" href="#runtime-chunk" aria-hidden="true">#</a> runtime chunk</h2><p>runtime chunk \b指的是生成含有 webpack bootstrap 代码的 js 文件的 chunk，什么是 webpack bootstrap 代码呢？以下的代码片段就是启动代码。</p><details class="custom-container details"><summary>webapck runtime boostrap 代码</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The require function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Check if module is in cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedModules[moduleId]) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> installedModules[moduleId].exports;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Create a new module (and put it into the cache)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\ti: moduleId,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tl: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\texports: {}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Execute the module function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\tmodules[moduleId].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, __webpack_require__);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Flag the module as loaded</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Return the exports of the module</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the modules object (__webpack_modules__)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define getter function for harmony exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getter</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name)) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, get: getter });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define __esModule on exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag, { value: </span><span style="color:#9ECBFF;">&#39;Module&#39;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__esModule&#39;</span><span style="color:#E1E4E8;">, { value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// create a fake namespace object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 1: value is a module id, require it</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 2: merge all properties of value into the ns</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 4: return value when already ns object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 8|1: behave like require</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">mode</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.__esModule) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(ns);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(ns, </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, value: value });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value) __webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(ns, key, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value[key]; }.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, key));</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ns;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// getDefaultExport function for compatibility with non-harmony modules</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.__esModule </span><span style="color:#F97583;">?</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">]; } </span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModuleExports</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">; };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(getter, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, getter);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> getter;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Object.prototype.hasOwnProperty.call</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(object, property); };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// __webpack_public_path__</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Load entry module and return exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(__webpack_require__.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span></code></pre></div></details><p>所以 chunk 可能同时是 initial 和 runtime chunk，比如上述的 <code>index chunk</code> 就是这种类型，它既含有 webpack bootstrap code，也含有所有 modules，modules 作为实参传给 bootstrap 函数。</p>',9),_=(0,l.Uk)("那么是否可以让 runtime chunk 变得更加 pure 一点么？"),f=(0,l.Uk)("runtimeChunk"),b=(0,l.Uk)(" 配置可以做到这点，原理就是 "),g=(0,l.Wm)("strong",null,"modules 分离到另外的 chunk，单独把 bootstrap code 抽离至 runtime chunk",-1),C=(0,l.Uk)("。"),w=(0,l.uE)('<p>举个例子：</p><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  context: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#9ECBFF;">&quot;./index&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    runtimeChunk: </span><span style="color:#9ECBFF;">&#39;single&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 命令打包后，在 dist 目录下面生成了 <code>index.js</code> 和 <code>runtime.js</code>，其中 <code>runtime.js</code> 就是由 runtime chunk 生成的，代码如下：</p><details class="custom-container details"><summary>runtime.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// install a JSONP callback for chunk loading</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moreModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> executeModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// add &quot;moreModules&quot; to the modules object,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// then flag all &quot;chunkIds&quot; as loaded and fire callback</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId, chunkId, i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, resolves </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> chunkIds.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tchunkId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkIds[i];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(installedChunks, chunkId) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> installedChunks[chunkId]) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tresolves.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunks[chunkId][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tinstalledChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(moduleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> moreModules) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(moreModules, moduleId)) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tmodules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moreModules[moduleId];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(parentJsonpFunction) </span><span style="color:#B392F0;">parentJsonpFunction</span><span style="color:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(resolves.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tresolves.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// add entry modules from loaded chunk to deferred list</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\tdeferredModules.push.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(deferredModules, executeModules </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// run deferred modules when all chunks ready</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkDeferredModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkDeferredModules</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> deferredModules.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> deferredModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deferredModules[i];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fulfilled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> deferredModule.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> depId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deferredModule[j];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedChunks[depId] </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) fulfilled </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(fulfilled) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tdeferredModules.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t\tresult </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(__webpack_require__.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> deferredModule[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// object to store loaded and loading chunks</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// undefined = chunk not loaded, null = chunk preloaded/prefetched</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Promise = chunk loading, 0 = chunk loaded</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedChunks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> deferredModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// The require function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Check if module is in cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedModules[moduleId]) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> installedModules[moduleId].exports;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Create a new module (and put it into the cache)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\ti: moduleId,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\tl: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\texports: {}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Execute the module function</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\tmodules[moduleId].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, __webpack_require__);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Flag the module as loaded</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#6A737D;">// Return the exports of the module</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the modules object (__webpack_modules__)</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// expose the module cache</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define getter function for harmony exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getter</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name)) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, name, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, get: getter });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// define __esModule on exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.toStringTag, { value: </span><span style="color:#9ECBFF;">&#39;Module&#39;</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t}</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;__esModule&#39;</span><span style="color:#E1E4E8;">, { value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// create a fake namespace object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 1: value is a module id, require it</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 2: merge all properties of value into the ns</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 4: return value when already ns object</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// mode &amp; 8|1: behave like require</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">mode</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">((mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.__esModule) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ns </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(ns);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(ns, </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">, { enumerable: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, value: value });</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(mode </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> value) __webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(ns, key, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value[key]; }.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, key));</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ns;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// getDefaultExport function for compatibility with non-harmony modules</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> getter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.__esModule </span><span style="color:#F97583;">?</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDefault</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">]; } </span><span style="color:#F97583;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t\t</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModuleExports</span><span style="color:#E1E4E8;">() { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">; };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t__webpack_require__.</span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">(getter, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, getter);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t\t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> getter;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t};</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Object.prototype.hasOwnProperty.call</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.</span><span style="color:#B392F0;">o</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">property</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(object, property); };</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// __webpack_public_path__</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t__webpack_require__.p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> jsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> oldJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.push.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(jsonpArray);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \tjsonpArray.push </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webpackJsonpCallback;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \tjsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(jsonpArray[i]);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parentJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldJsonpFunction;</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// run deferred modules from other chunks</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#B392F0;">checkDeferredModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#6A737D;">/************************************************************************/</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> ([]);</span></span>\n<span class="line"></span></code></pre></div></details><p>可以看到 <code>runtime.js</code> 仅仅包含 webpack runtime boostrap 代码，所有的 modules 都分离到 <code>index.js</code>。</p><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],[</span></span>\n<span class="line"><span style="color:#6A737D;">/* 0 */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#E1E4E8;">],[[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]]]);</span></span>\n<span class="line"></span></code></pre></div></details><h2 id="async-chunk" tabindex="-1"><a class="header-anchor" href="#async-chunk" aria-hidden="true">#</a> async chunk</h2><p>async chunk 的由来是因为 code splitting，webpack 提供两种方式来创建 async chunk。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// import 动态引入</span></span>\n<span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;a&quot; */</span><span style="color:#9ECBFF;">&#39;./a&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 生成 a async chunk</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// require.ensure 语法</span></span>\n<span class="line"><span style="color:#E1E4E8;">require.</span><span style="color:#B392F0;">ensure</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;./a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {}, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 生成 a async chunk</span></span>\n<span class="line"></span></code></pre></div><p>a async chunk 代表分割点就是 a 模块，chunk 包含了 a 模块，以及由 a 模块 深度遍历解析出来的所有 modules。举个例子：</p><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  context: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#9ECBFF;">&quot;./index&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;a&quot; */</span><span style="color:#9ECBFF;">&#39;./a&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>a.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./b.js&#39;</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>b.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;It is b module&#39;</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 打包命令之后，a async chunk 生成的文件 <code>a.js</code> 的代码如下，包含了模块 a 以及模块 b，async chunk 的特点就是 <strong>webpack 运行时通过 script 加载 async chunk 对应的 js，不需要人为手动通过 script 引入</strong>。</p><details class="custom-container details"><summary>dist/a.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">],{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./a.js&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/*!**************!*\\</span></span>\n<span class="line"><span style="color:#6A737D;">  !*** ./a.js ***!</span></span>\n<span class="line"><span style="color:#6A737D;">  \\**************/</span></span>\n<span class="line"><span style="color:#6A737D;">/*! no exports provided */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony import */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _b_js__WEBPACK_IMPORTED_MODULE_0__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/*! ./b.js */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./b.js&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> }),</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./b.js&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/*!**************!*\\</span></span>\n<span class="line"><span style="color:#6A737D;">  !*** ./b.js ***!</span></span>\n<span class="line"><span style="color:#6A737D;">  \\**************/</span></span>\n<span class="line"><span style="color:#6A737D;">/*! exports provided: default */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;It is b module&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">}]);</span></span>\n<span class="line"></span></code></pre></div></details>',17),v=(0,l.Uk)("与 initial chunk 类似，async chunk 也可以通过 "),q=(0,l.Uk)("splitChunks"),j=(0,l.Uk)(" 配置，从 async chunk 分离出来的 modules 组成的 newChunk 也属于 async 类型，姑且称之为"),M=(0,l.Wm)("strong",null,"衍生品",-1),x=(0,l.Uk)("，它的特点就是 "),I=(0,l.Wm)("strong",null,"webpack 运行时会通过 script 加载所有的 async chunk 生成的 js，并且通过 Promise.all 等待所有文件加载完成",-1),G=(0,l.Uk)("，对上述的例子做一点改造，修改 webpack.config.js 中的 cacheGroups 分组："),O=(0,l.uE)('<details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  context: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    index: </span><span style="color:#9ECBFF;">&quot;./index&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        b: { </span><span style="color:#6A737D;">// 将 module b 从 a async chunk 抽离至 b async chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">          test: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minSize: </span><span style="color:#79B8FF;">30</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><p>运行 webpack 打包之后，在 dist 目录下面生成 <code>a.js</code>、<code>b.js</code>、<code>index.js</code>，其中 <code>b.js</code> 就是<strong>衍生品</strong> b async chunk 生成的 js，它的组成仅仅包含 b 模块。</p><details class="custom-container details"><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">],{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./b.js&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/*!**************!*\\</span></span>\n<span class="line"><span style="color:#6A737D;">  !*** ./b.js ***!</span></span>\n<span class="line"><span style="color:#6A737D;">  \\**************/</span></span>\n<span class="line"><span style="color:#6A737D;">/*! exports provided: default */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony default export */</span><span style="color:#E1E4E8;"> __webpack_exports__[</span><span style="color:#9ECBFF;">&quot;default&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;It is b module&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">}]);</span></span>\n<span class="line"></span></code></pre></div></details><p>既然 b 模块被抽离了，所以 <code>a.js</code> 只包含了 a 模块，不再同时包含 a 与 b 模块。</p><details class="custom-container details"><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">],{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./a.js&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/*!**************!*\\</span></span>\n<span class="line"><span style="color:#6A737D;">  !*** ./a.js ***!</span></span>\n<span class="line"><span style="color:#6A737D;">  \\**************/</span></span>\n<span class="line"><span style="color:#6A737D;">/*! no exports provided */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">r</span><span style="color:#E1E4E8;">(__webpack_exports__);</span></span>\n<span class="line"><span style="color:#6A737D;">/* harmony import */</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> _b_js__WEBPACK_IMPORTED_MODULE_0__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/*! ./b.js */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./b.js&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">}]);</span></span>\n<span class="line"></span></code></pre></div></details><p>那么对于 <code>index.js</code>，是怎么加载 <code>a.js</code>，<code>b.js</code> 的呢？</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// ... 省略其他代码</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// Load entry module and return exports</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(__webpack_require__.s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> ({</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#6A737D;">/*!******************!*\\</span></span>\n<span class="line"><span style="color:#6A737D;">  !*** ./index.js ***!</span></span>\n<span class="line"><span style="color:#6A737D;">  \\******************/</span></span>\n<span class="line"><span style="color:#6A737D;">/*! no static exports found */</span></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/*! import() | a */</span><span style="color:#E1E4E8;">[__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">), __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">)]).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(__webpack_require__.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/*! ./a */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./a.js&quot;</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/***/</span><span style="color:#E1E4E8;"> })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> });</span></span>\n<span class="line"></span></code></pre></div><p><code>__webpack_require__.e</code> 内部会通过 script 动态加载额外的 js。</p><h2 id="关于-chunk-的类" tabindex="-1"><a class="header-anchor" href="#关于-chunk-的类" aria-hidden="true">#</a> 关于 chunk 的类</h2><ol><li><p><strong>Chunk</strong></p><details class="custom-container details"><summary>Chunk.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;"> * A Chunk is a unit of encapsulation for Modules.</span></span>\n<span class="line"><span style="color:#6A737D;">* Chunks are &quot;rendered&quot; into bundles that get emitted when the build completes.</span></span>\n<span class="line"><span style="color:#6A737D;">*/</span></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Chunk</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">name</span><span style="color:#6A737D;"> of chunk being created, is optional (for subclasses)</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number | null}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[] | null}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ids </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.debugId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> debugId</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.preventIntegration </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module=}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@private</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SortableSet&lt;Module&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, sortByIdentifier);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string?}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.filenameTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@private</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SortableSet&lt;ChunkGroup&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, sortChunkGroupById);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string[]}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.files </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.rendered </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contentHash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.renderedHash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.chunkReason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.extraAsync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.removedModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> Chunk.entry has been deprecated. Please use .hasRuntime() instead</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> Throws an error trying to access this property</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ERR_CHUNK_ENTRY</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> .entry has been deprecated. Please use .hasRuntime() instead</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">data</span><span style="color:#6A737D;"> The data that was attempting to be set</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> Throws an error trying to access this property</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">entry</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ERR_CHUNK_ENTRY</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> Chunk.initial was removed. Use canBeInitial/isOnlyInitial()</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> Throws an error trying to access this property</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initial</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ERR_CHUNK_INITIAL</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> Chunk.initial was removed. Use canBeInitial/isOnlyInitial()</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">data</span><span style="color:#6A737D;"> The data attempting to be set</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{never}</span><span style="color:#6A737D;"> Throws an error trying to access this property</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initial</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ERR_CHUNK_INITIAL</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> whether or not the Chunk will have a runtime</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hasRuntime</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkGroup.</span><span style="color:#B392F0;">isInitial</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkGroup </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Entrypoint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkGroup.</span><span style="color:#B392F0;">getRuntimeChunk</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> whether or not this chunk can be an initial chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">canBeInitial</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkGroup.</span><span style="color:#B392F0;">isInitial</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> whether this chunk can only be an initial chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isOnlyInitial</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.size </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunkGroup.</span><span style="color:#B392F0;">isInitial</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> if this chunk contains the entry module</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryModule;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">module</span><span style="color:#6A737D;"> the module that will be added to this chunk.</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if the chunk doesn&#39;t have the module and it was added</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addModule</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">module</span><span style="color:#6A737D;"> the module that will be removed from this chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if chunk exists and is successfully deleted</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeModule</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">removeChunk</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">modules</span><span style="color:#6A737D;"> the new modules to be set</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{void}</span><span style="color:#6A737D;"> set new modules to this chunk and return nothing</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setModules</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(modules, sortByIdentifier);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> the amount of modules in chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getNumberOfModules</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SortableSet}</span><span style="color:#6A737D;"> return the modules SortableSet for this chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">modulesIterable</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkGroup}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">chunkGroup</span><span style="color:#6A737D;"> the chunkGroup the chunk is being added</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if chunk is not apart of chunkGroup and is added successfully</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkGroup</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunkGroup)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkGroup}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">chunkGroup</span><span style="color:#6A737D;"> the chunkGroup the chunk is being removed from</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if chunk does exist in chunkGroup and is removed</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">removeGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkGroup</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunkGroup)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkGroup}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">chunkGroup</span><span style="color:#6A737D;"> the chunkGroup to check</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if chunk has chunkGroup reference and exists in chunkGroup</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isInGroup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkGroup</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> the amount of groups said chunk is in</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getNumberOfGroups</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SortableSet&lt;ChunkGroup&gt;}</span><span style="color:#6A737D;"> the chunkGroups that said chunk is referenced in</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">groupsIterable</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">otherChunk</span><span style="color:#6A737D;"> the chunk to compare itself with</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{-1|0|1}</span><span style="color:#6A737D;"> this is a comparitor function like sort and returns -1, 0, or 1 based on sort order</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherChunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">otherChunk.name) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> otherChunk.name) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> otherChunk.name) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> otherChunk.name) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> otherChunk._modules.size) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> otherChunk._modules.size) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    otherChunk._modules.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherChunk._modules[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-constant-condition</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aItem.done) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aModuleIdentifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aItem.value.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bModuleIdentifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bItem.value.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleIdentifier </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bModuleIdentifier) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleIdentifier </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bModuleIdentifier) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">module</span><span style="color:#6A737D;"> Module to check</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true if module does exist in this chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">containsModule</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module[]}</span><span style="color:#6A737D;"> an array of modules (do not modify)</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getModules</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">getFromCache</span><span style="color:#E1E4E8;">(getArray);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getModulesIdent</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">getFromUnorderedCache</span><span style="color:#E1E4E8;">(getModulesIdent);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">reason</span><span style="color:#6A737D;"> reason why chunk is removed</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{void}</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">reason</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// cleanup modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Array.from is used here to create a clone, because removeChunk modifies this._modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">removeChunk</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunkGroup.</span><span style="color:#B392F0;">removeChunk</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  *</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">module</span><span style="color:#6A737D;"> module to move</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">otherChunk</span><span style="color:#6A737D;"> other chunk to move it to</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{void}</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">moveModule</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">otherChunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    GraphHelpers.</span><span style="color:#B392F0;">disconnectChunkAndModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    GraphHelpers.</span><span style="color:#B392F0;">connectChunkAndModule</span><span style="color:#E1E4E8;">(otherChunk, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">rewriteChunkInReasons</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, [otherChunk]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  *</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">otherChunk</span><span style="color:#6A737D;"> the chunk to integrate with</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">reason</span><span style="color:#6A737D;"> reason why the module is being integrated</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> returns true or false if integration succeeds or fails</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">integrate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherChunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reason</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canBeIntegrated</span><span style="color:#E1E4E8;">(otherChunk)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Pick a new name for the integrated chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> otherChunk.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> otherChunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// When both chunks have entry modules or none have one, use</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// shortest name</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> otherChunk.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> otherChunk.name.</span><span style="color:#79B8FF;">length</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> otherChunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> otherChunk.name </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> otherChunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (otherChunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Pick the name of the chunk with the entry module</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherChunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (otherChunk.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherChunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Array.from is used here to create a clone, because moveModule modifies otherChunk._modules</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(otherChunk._modules)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      otherChunk.</span><span style="color:#B392F0;">moveModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    otherChunk._modules.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (otherChunk.entryModule) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherChunk.entryModule;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> otherChunk._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunkGroup.</span><span style="color:#B392F0;">replaceChunk</span><span style="color:#E1E4E8;">(otherChunk, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addGroup</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    otherChunk._groups.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">newChunk</span><span style="color:#6A737D;"> the new chunk that will be split out of the current chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{void}</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newChunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._groups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunkGroup.</span><span style="color:#B392F0;">insertChunk</span><span style="color:#E1E4E8;">(newChunk, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newChunk.</span><span style="color:#B392F0;">addGroup</span><span style="color:#E1E4E8;">(chunkGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">updateHash</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">hash</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    hash.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">} `</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    hash.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ids </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ids.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    hash.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">`${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;&quot;} `</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hash.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(m.hash);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">canBeIntegrated</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherChunk</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.preventIntegration </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> otherChunk.preventIntegration) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">a</span><span style="color:#6A737D;"> chunk</span></span>\n<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">b</span><span style="color:#6A737D;"> chunk</span></span>\n<span class="line"><span style="color:#6A737D;">    * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> true, if a is always available when b is reached</span></span>\n<span class="line"><span style="color:#6A737D;">    */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(b.groupsIterable);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> queue) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.</span><span style="color:#B392F0;">isInGroup</span><span style="color:#E1E4E8;">(chunkGroup)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkGroup.</span><span style="color:#B392F0;">isInitial</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.parentsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          queue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(parent);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">selfHasRuntime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hasRuntime</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">otherChunkHasRuntime</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherChunk.</span><span style="color:#B392F0;">hasRuntime</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selfHasRuntime </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> otherChunkHasRuntime) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selfHasRuntime) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, otherChunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (otherChunkHasRuntime) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAvailable</span><span style="color:#E1E4E8;">(otherChunk, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> otherChunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  *</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">size</span><span style="color:#6A737D;"> the size</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options</span><span style="color:#6A737D;"> the options passed in</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> the multiplier returned</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addMultiplierAndOverhead</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">overhead</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> options.chunkOverhead </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> options.chunkOverhead </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">multiplicator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canBeInitial</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> options.entryChunkMultiplicator </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> multiplicator </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> overhead;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> the size of all modules</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">modulesSize</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">getFromUnorderedCache</span><span style="color:#E1E4E8;">(getModulesSize);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options</span><span style="color:#6A737D;"> the size display options</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> the chunk size</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addMultiplierAndOverhead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">modulesSize</span><span style="color:#E1E4E8;">(), options);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">otherChunk</span><span style="color:#6A737D;"> the other chunk</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TODO}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">options</span><span style="color:#6A737D;"> the options for this function</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number | false}</span><span style="color:#6A737D;"> the size, or false if it can&#39;t be integrated</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">integratedSize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">otherChunk</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Chunk if it&#39;s possible to integrate this chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">canBeIntegrated</span><span style="color:#E1E4E8;">(otherChunk)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> integratedModulesSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">modulesSize</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// only count modules that do not exist in this chunk!</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">otherModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> otherChunk._modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(otherModule)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        integratedModulesSize </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> otherModule.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addMultiplierAndOverhead</span><span style="color:#E1E4E8;">(integratedModulesSize, options);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{function(Module, Module): -1|0|1=}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">sortByFn</span><span style="color:#6A737D;"> a predicate function used to sort modules</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{void}</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sortModules</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">sortByFn</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.</span><span style="color:#B392F0;">sortWith</span><span style="color:#E1E4E8;">(sortByFn </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> sortModuleById);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">sortItems</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">sortModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Set&lt;Chunk&gt;}</span><span style="color:#6A737D;"> a set of all the async chunks</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getAllAsyncChunks</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialChunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">intersect</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.groupsIterable, </span><span style="color:#FFAB70;">g</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(g.chunks))</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.childrenIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        queue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(child);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> queue) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">initialChunks.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunk)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunks.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.childrenIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        queue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(child);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunks;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">ChunkMaps</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">hash</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, Record&lt;string, string&gt;&gt;}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">contentHash</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">name</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">realHash</span><span style="color:#6A737D;"> should the full hash or the rendered hash be used</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkMaps}</span><span style="color:#6A737D;"> the chunk map information</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getChunkMaps</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">realHash</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkHashMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, Record&lt;string, string&gt;&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkContentHashMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkNameMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getAllAsyncChunks</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunkHashMap[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realHash </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> chunk.hash </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chunk.renderedHash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(chunk.contentHash)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunkContentHashMap[key]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunkContentHashMap[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkContentHashMap[key][chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.contentHash[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkNameMap[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hash: chunkHashMap,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      contentHash: chunkContentHashMap,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: chunkNameMap</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string, Set&lt;TODO&gt;[]&gt;}</span><span style="color:#6A737D;"> a record object of names to lists of child ids(?)</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getChildIdsByOrders</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lists</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (group.chunks[group.chunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">childGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> group.childrenIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// TODO webpack 5 remove this check for options</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> childGroup.options </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(childGroup.options)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (key.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Order&quot;</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">substr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, key.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Order&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lists.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (list </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) lists.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(name, (list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []));</span></span>\n<span class="line"><span style="color:#E1E4E8;">                list.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">                  order: childGroup.options[key],</span></span>\n<span class="line"><span style="color:#E1E4E8;">                  group: childGroup</span></span>\n<span class="line"><span style="color:#E1E4E8;">                });</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> lists) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      list.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cmp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.order </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a.order;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cmp </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cmp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TODO webpack 5 remove this check of compareTo</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.group.compareTo) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a.group.</span><span style="color:#B392F0;">compareTo</span><span style="color:#E1E4E8;">(b.group);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">set</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.group.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            set.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk.id);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> set;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">())</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getChildIdsByOrdersMap</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">includeDirectChildren</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkMaps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addChildIdsByOrdersToMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">getChildIdsByOrders</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(data)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chunkMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkMaps[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkMap </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunkMaps[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunkMap[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (includeDirectChildren) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunks.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">addChildIdsByOrdersToMap</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getAllAsyncChunks</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addChildIdsByOrdersToMap</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunkMaps;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@typedef</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Object}</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">ChunkModuleMaps</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, (string|number)[]&gt;}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">id</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@property</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">hash</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ModuleFilterPredicate}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">filterFn</span><span style="color:#6A737D;"> function used to filter modules</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ChunkModuleMaps}</span><span style="color:#6A737D;"> module map information</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getChunkModuleMaps</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filterFn</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, (string|number)[]&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkModuleIdMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Record&lt;string|number, string&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkModuleHashMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getAllAsyncChunks</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{(string|number)[]}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> array;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunk.modulesIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">filterFn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (array </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">            chunkModuleIdMap[chunk.id] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          array.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunkModuleHashMap[</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.renderedHash;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (array </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        array.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      id: chunkModuleIdMap,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hash: chunkModuleHashMap</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>\n<span class="line"><span style="color:#6A737D;">  *</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{function(Module): boolean}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">filterFn</span><span style="color:#6A737D;"> predicate function used to filter modules</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{function(Chunk): boolean}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">filterChunkFn</span><span style="color:#6A737D;"> predicate function used to filter chunks</span></span>\n<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span><span style="color:#6A737D;"> return true if module exists in graph</span></span>\n<span class="line"><span style="color:#6A737D;">  */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hasModuleInGraph</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filterFn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">filterChunkFn</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.groupsIterable);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksProcessed</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> queue) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunksProcessed.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunk)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunksProcessed.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">filterChunkFn </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterChunkFn</span><span style="color:#E1E4E8;">(chunk)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunk.modulesIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">filterFn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkGroup.childrenIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        queue.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(child);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`Chunk[${</span><span style="color:#79B8FF;">Array</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">from</span><span style="color:#9ECBFF;">(</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">_modules</span><span style="color:#9ECBFF;">).</span><span style="color:#B392F0;">join</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">}]`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></details></li></ol>',10),S={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("p",null,[o,(0,l.Wm)(a,{to:"/webpack4/term/module.html"},{default:(0,l.w5)((()=>[e])),_:1}),E]),(0,l.Wm)("nav",t,[(0,l.Wm)("ul",null,[(0,l.Wm)("li",null,[(0,l.Wm)(a,{to:"#initial-chunk"},{default:(0,l.w5)((()=>[c])),_:1})]),(0,l.Wm)("li",null,[(0,l.Wm)(a,{to:"#runtime-chunk"},{default:(0,l.w5)((()=>[r])),_:1})]),(0,l.Wm)("li",null,[(0,l.Wm)(a,{to:"#async-chunk"},{default:(0,l.w5)((()=>[y])),_:1})]),(0,l.Wm)("li",null,[(0,l.Wm)(a,{to:"#关于-chunk-的类"},{default:(0,l.w5)((()=>[i])),_:1})])])]),F,(0,l.Wm)("p",null,[u,(0,l.Wm)(a,{to:"/webpack4/term/module.html#entrymodule"},{default:(0,l.w5)((()=>[d])),_:1}),B]),h,(0,l.Wm)("p",null,[(0,l.Wm)("strong",null,[A,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/splitChunks.html"},{default:(0,l.w5)((()=>[D])),_:1}),m])]),k,(0,l.Wm)("p",null,[_,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/runtimeChunk.html"},{default:(0,l.w5)((()=>[f])),_:1}),b,g,C]),w,(0,l.Wm)("p",null,[v,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/splitChunks.html"},{default:(0,l.w5)((()=>[q])),_:1}),j,M,x,I,G]),O],64)}}}}]);