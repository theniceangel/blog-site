(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[138],{2829:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-4d0aacf6",path:"/webpack4/internal-class/childCompiler.html",title:"childCompiler",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"webpack4/internal-class/childCompiler.md",git:{updatedTime:1630856917e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},1069:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const l=(0,a(6252).uE)('<h1 id="childcompiler" tabindex="-1"><a class="header-anchor" href="#childcompiler" aria-hidden="true">#</a> childCompiler</h1><p>childCompiler 并不是一个真正存在的类，它是 Compiler 的另一种形态。因为 Compiler 提供了一个 API 来生成 childCompiler。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runAsChild</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentCompilation.children.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(compilation);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">getAssets</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentCompilation.</span><span style="color:#B392F0;">emitAsset</span><span style="color:#E1E4E8;">(name, source, info);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entries</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        compilation.entrypoints.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">ep</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ep.chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ).</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(chunks);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }, []);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, entries, compilation);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createChildCompiler</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">compilerName</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">compilerIndex</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">outputOptions</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">plugins</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">childCompiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(plugins)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> plugins) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        plugin.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(childCompiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果黑名单的 hooks，不需要复刻至 childCompiler 上</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">[</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;make&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;compile&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;emit&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;afterEmit&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;invalid&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;done&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;thisCompilation&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        ].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(name)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (childCompiler.hooks[name]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          childCompiler.hooks[name].taps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks[name].taps.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilerName;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.outputPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputPath;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.inputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputFileSystem;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.outputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.resolverFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.fileTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileTimestamps;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.contextTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextTimestamps;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">relativeCompilerName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">makePathsRelative</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context, compilerName);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records[relativeCompilerName]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records[relativeCompilerName] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records[relativeCompilerName][compilerIndex]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      childCompiler.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records[relativeCompilerName][compilerIndex];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records[relativeCompilerName].</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">((childCompiler.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.options.output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(childCompiler.options.output);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> outputOptions) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      childCompiler.options.output[name] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> outputOptions[name];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    childCompiler.parentCompilation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.hooks.childCompiler.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      childCompiler,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilerName,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilerIndex</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> childCompiler;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>childCompiler 生成的时候会复刻 parentCompiler 上所有 hooks，当然会排除黑名单的一些 hooks，比如 <code>[&#39;make&#39;, &#39;compile&#39;, &#39;emit&#39;, &#39;afterEmit&#39;, &#39;invalid&#39;, &#39;done&#39;, &#39;thisCompilation&#39;]</code> 运行的时候必须调用 <code>runAsChild</code>，而不是调用 <code>run</code> 来进行构建。</p>',4),p={render:function(s,n){return l}}}}]);