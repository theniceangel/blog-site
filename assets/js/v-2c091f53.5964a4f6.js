(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[6838],{1985:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-2c091f53",path:"/webpack4/configuration/optimization/splitChunks.html",title:"splitChunks",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"核心思想",slug:"核心思想",children:[]},{level:2,title:"源码",slug:"源码",children:[{level:3,title:"默认配置项",slug:"默认配置项",children:[]},{level:3,title:"一. 初始化",slug:"一-初始化",children:[]},{level:3,title:"二. 钩入 compilation.hooks.optimizeChunksAdvanced",slug:"二-钩入-compilation-hooks-optimizechunksadvanced",children:[]},{level:3,title:"三. compilation.hooks.optimizeChunksAdvanced 的 handler 剖析",slug:"三-compilation-hooks-optimizechunksadvanced-的-handler-剖析",children:[]},{level:3,title:"流程图",slug:"流程图",children:[]},{level:3,title:"总结",slug:"总结",children:[]}]}],filePathRelative:"webpack4/configuration/optimization/splitChunks.md",git:{updatedTime:163965705e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:3}]}}},2048:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>t});var l=a(6252);const p=(0,l.uE)('<h1 id="splitchunks" tabindex="-1"><a class="header-anchor" href="#splitchunks" aria-hidden="true">#</a> splitChunks</h1><p>webpack 优化 chunk 的最重要一步是 splitChunksPlugin，对于开发者，可以通过该插件来决定输出的 chunk 的大小，以及被多个 chunk 重复依赖的 modules 应该怎么被打包。自己在之前做一个多页打包的项目优化的时候，也是使用了该配置，当时用的一知半解，翻了网上的一些文章，很少有写的特别好，特别全的分析，刚好有时间自己可以从头到尾研究一番。</p><p>大多数人对于 splitChunks 的配置一头雾水，其一是 webpack 的 dependencyGraph 很复杂，还有一个原因是官方文档实在是不能吐槽之再吐槽了，下面会从源码的角度分析配置项的作用，方便开发者随心所欲地控制 chunks 的输出。</p><h2 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h2><p>插件的核心原理是<strong>通过 splitChunks 的 cacheGroups 来决定哪些 chunks 需要被额外输出，chunks 由 modules 来组成，而 modules 是否满足加入 cacheGroups 的某个分组的条件取决于 splitChunks 的其他若干配置项</strong>。</p><p>因此，我们要抓住的脉络是<strong>哪些 module 丢进了 cacheGroups 的分组对象中，最后伴随着 chunk 写入 js 文件</strong>。</p><p>捋清上述的思路之后，对于 splitChunksPlugin 的源码理解会事半功倍，这里为什么配置项为啥叫 <code>cacheGroups</code>，大概的原因是分离出来的 chunk 希望能够被<strong>长期缓存</strong>(long term cache)，所以有一个 cache 的字眼。</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2><h3 id="默认配置项" tabindex="-1"><a class="header-anchor" href="#默认配置项" aria-hidden="true">#</a> 默认配置项</h3><p>splitChunks 的默认配置项如下：</p><details class="custom-container details"><summary>点击展开</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunks: </span><span style="color:#9ECBFF;">&#39;async&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      minSize: </span><span style="color:#79B8FF;">30000</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxSize: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      minChunks: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxAsyncRequests: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxInitialRequests: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      automaticNameDelimiter: </span><span style="color:#9ECBFF;">&#39;~&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      automaticNameMaxLength: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        vendors: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        default: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          reuseExistingChunk: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><p>下面分别解释一下各个配置项的作用。</p><ul><li><p><strong>chunks</strong></p><p>默认值为 <code>&quot;async&quot;</code>，还可以配置为 <code>&quot;initial&quot; | &quot;all&quot; | Function </code>，这个配置项是什么意思呢？很多人不解，举个例子。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// entry.js  // webpack 打包入口</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./dynamic.js&quot;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./moduleA&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// dynamic.js</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./moduleB&#39;</span></span>\n<span class="line"></span></code></pre></div><p>在上面这个例子里面，<code>moduleA</code> 属于 <code>initial chunk</code>，<code>moduleB</code> 属于 <code>async chunk</code>，如果 cacheGroups 下面的分组配置的是 <code>async</code>，说明 moduleA 满足 chunks 的分组条件，接着继续验证是否满足其他的分组条件。<code>all</code> 的话表示不论 module 来自哪里，都可以被分组，当然 webpack 还提供 Function 配置来做更精细的 chunk 判断。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#B392F0;">splitChunks</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">chunks</span><span style="color:#E1E4E8;"> (chunk) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果 module 来自于名为 &#39;excluded&#39; chunk，那么不允许加入该分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;excluded&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>minSize</strong></p><p>默认值为 <code>30000</code>，验证当前 cacheGroups 分组的文件大小，最小必须满足 30000 bytes。</p></li><li><p><strong>maxSize</strong></p><p>默认值为 <code>0</code>，表示不验证当前 cacheGroups 分组的文件大小，如果分组的大小超过 maxSize，webpack 内部会采用一种叫 <code>deterministic grouping</code> 的算法，对 chunks 里面的 modules 做重新的分割。由于 module 已经是不可再分割的最小单元，所以最后打包的 chunk 的体积可能违背 maxSize 和 minSize。</p></li><li><p><strong>minChunks</strong></p><p>默认值为 <code>1</code>，当前 module 至少被一个 chunk 引用，才满足加入对应 cacheGroups 分组的条件。</p></li><li><p><strong>maxInitialRequests</strong></p><p>默认值为 <code>3</code>，为了加载 entrypoint 时，允许的最大并行请求数量。这个配置项非常难理解，如果不对源码特别熟悉的话，永远不懂它到底是啥意思，这也是我吐槽官方文档写的烂的原因。举个例子：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 假设 entry.js 作为 webpack 打包的入口，并且引入模块 A 和 模块 B 如下</span></span>\n<span class="line"><span style="color:#6A737D;">// maxInitialRequests 配置为 2, 分组名称为 default</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// entry.js</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./moduleA&#39;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./moduleB&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// moduleA 与 moduleB 都属于 entrypoint 里的 chunk 的模块</span></span>\n<span class="line"><span style="color:#6A737D;">// 判断 moduleA 是否要放入分组 default</span></span>\n<span class="line"><span style="color:#6A737D;">// 当前加载 entrypoint 只需要一个请求，因此 moduleA 可以放入分组 default</span></span>\n<span class="line"><span style="color:#6A737D;">// 这个时候 entrypoint 需要额外并行引入 default chunk 了，因为 moduleA 是它的前置依赖。</span></span>\n<span class="line"><span style="color:#6A737D;">// 这个时候总的请求数量为 2。</span></span>\n<span class="line"><span style="color:#6A737D;">// 接着判断 moduleB 是否要放入分组 default</span></span>\n<span class="line"><span style="color:#6A737D;">// 由于 maxInitialRequests 为 2 ，moduleB 无法加入 default 分组</span></span>\n<span class="line"><span style="color:#6A737D;">// 最后 moduleA 随着 default chunk 输出， moduleB 随着 entrypoint 输出</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>maxAsyncRequests</strong></p><p>默认值为 <code>5</code>，加载按需模块的时候，最大的并行请求数量，原理与上述的类似。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 假设 entry.js 作为 webpack 打包的入口，按需异步加载引入模块 A</span></span>\n<span class="line"><span style="color:#6A737D;">// 异步模块 A 里面引入 模块 B</span></span>\n<span class="line"><span style="color:#6A737D;">// maxAsyncRequests 配置为 2, 分组名称为 default</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// entry.js</span></span>\n<span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &quot;asyncChunk&quot; */</span><span style="color:#9ECBFF;">&#39;./moduleA&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// moduleA.js</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./moduleB&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 判断 moduleB 是否要放入分组 default</span></span>\n<span class="line"><span style="color:#6A737D;">// 当前异步加载 moduleA 只需要一个请求，而 maxAsyncRequests 为 2，因此 moduleB 可以放入分组 default</span></span>\n<span class="line"><span style="color:#6A737D;">// 这个时候 webpack 打出来的 entry 伪代码类似如下</span></span>\n<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;asyncChunk&#39;</span><span style="color:#E1E4E8;">), __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">)]).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ....</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"><span style="color:#6A737D;">// 如果 maxAsyncRequests 修改为 1，那么 moduleB 就不可以放入分组 default</span></span>\n<span class="line"></span></code></pre></div><p>这个案例其实也很好理解，moduleA 是异步加载的 chunk 的模块，moduleB 是由异步 chunk 分离出来的 default chunk 的模块，因此必须两个 chunk 都加载好，才能执行 entry 里面的代码。</p></li><li><p><strong>automaticNameDelimiter</strong></p><p>决定生成的 chunk 文件的名字的分隔符，比如(<code>&quot;vendors~main.js&quot;</code>)。</p></li><li><p><strong>automaticNameMaxLength</strong></p><p>决定生成的 chunk 文件的名字长度，名字太长会抛出 <code>ENAMETOOLONG ERROR</code>。</p></li><li><p><strong>name</strong></p><p>配置生成的 chunk 的名称。</p></li><li><p><strong>cacheGroups.{cacheGroup}.priority</strong></p><p>决定当前分组的优先级，优先级越高的分组，优先生成 chunk。</p></li><li><p><strong>cacheGroups.{cacheGroup}.reuseExistingChunk</strong></p><p>生成分组对象对应的 chunk 时，是否能复用已有的 chunk。</p></li><li><p><strong>cacheGroups.{cacheGroup}.enforce</strong></p><p>忽略 minSize, minChunks, maxAsyncRequests 和 maxInitialRequests 这些配置项，但是不能忽略一些其他配置项的影响，比如 chunks，就算配置了 enforce 为 true，假如 module 所属的 chunk 为 async 的话，你也无法将该 module 划分到类型为 initial chunk 的 cacheGroups 分组里面去。这个跟官网的 <code>always create chunks for this cache group</code> 这句话有一点出入，再次说明官方文档有多不靠谱。</p></li><li><p><strong>cacheGroups.{cacheGroup}.test</strong></p><p>决定哪些 modules 可以加入到该分组，如果忽略该配置，代表所有 modules 都可以加入该分组，它也可以是 string、正则，布尔值，甚至 Function，如果是一个正则的话，它会匹配 module 的名称，或者 module 所属的 chunk 名称，匹配上了就代表该 module 应该丢进分组，如果是字符串，它会判断 module 的绝对路径是否以该字符串开头或者 module 所属的 chunk 的名称是否以该字符串开头，例子如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 伪代码如下：</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// test 为字符串</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abc&#39;</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(test)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(chunk </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.name.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(test)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// test 为正则</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">abc</span><span style="color:#9ECBFF;">/</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">())</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(chunk </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(chunk.name)</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// test 是函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">vendors</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;javascript/auto&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>cacheGroups.{cacheGroup}.filename</strong></p><p>使用类似于 webpack 的 <code>output.filename</code> 配置来定制化 chunk 的名称，这个只针对 initial chunk，因为对于 async chunk 来说，所有的模块编译已经完成了，而 async chunk 又是运行时的代码，无法再去修改了。</p></li></ul><p>cacheGroups 含有默认的 <code>vendors</code> 和 <code>default</code> 两个分组，换句话来说，只要 module 满足其所有的分组条件，module 就会被丢到对应的分组里面，最后面根据 <code>priority</code> 或者其他的一些<strong>优先级条件</strong>来决定 module 是伴随哪个分组输出到对应的 chunk。</p><p>注意到 splitChunks top-level 级别的选项配置，从 <code>chunks</code> 到 <code>name</code>，这些配置项会被<strong>合并</strong>到 <code>cacheGroups</code> 下面对应的分组对象上去，类似于 <code>cacheGroups</code> 的<strong>全局配置</strong>的概念，其中 <code>test</code>、<code>priority</code>、<code>reuseExistingChunk</code>、<code>enforce</code> 属于<strong>局部配置</strong>，只能在 cacheGroups 下面配置。</p><p>好，对默认配置有一个全新的面貌之后，直接进入源码部分。</p><h3 id="一-初始化" tabindex="-1"><a class="header-anchor" href="#一-初始化" aria-hidden="true">#</a> 一. 初始化</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SplitChunksPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeOptions</span><span style="color:#E1E4E8;">(options);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">normalizeOptions</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunksFilter: SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeChunksFilter</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.chunks </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;all&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      minSize: options.minSize </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      enforceSizeThreshold: options.enforceSizeThreshold </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxSize: options.maxSize </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      minChunks: options.minChunks </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxAsyncRequests: options.maxAsyncRequests </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      maxInitialRequests: options.maxInitialRequests </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      hidePathInfo: options.hidePathInfo </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      filename: options.filename </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      getCacheGroups: SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeCacheGroups</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        cacheGroups: options.cacheGroups,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: options.name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        automaticNameDelimiter: options.automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        automaticNameMaxLength: options.automaticNameMaxLength</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      automaticNameDelimiter: options.automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      automaticNameMaxLength: options.automaticNameMaxLength </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">109</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      fallbackCacheGroup: SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeFallbackCacheGroup</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options.fallbackCacheGroup </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {},</span></span>\n<span class="line"><span style="color:#E1E4E8;">        options</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>构造函数里面很简单，就是对传入的 options 做一次 normalize，并且传给 this.options，方便后续的 <code>cacheGroups</code> 的分组对象使用。以下三个属性，都被 normalize 过了。</p><ul><li><p><strong>chunksFilter</strong></p><p>用来校验 module 所属的 chunk 类型，若通过，则进行下一项的校验。</p></li><li><p><strong>getCacheGroups</strong></p><p>将用户传入的 optimization.splitChunks.cacheGroups 做一次处理，因为 webpack 允许多样化的 cacheGroups 的配置，最终返回值为函数，方便后续调用。对应的函数体如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">normalizeCacheGroups</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  cacheGroups,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  automaticNameMaxLength</span></span>\n<span class="line"><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第一种：函数</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> cacheGroups </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO webpack 5 remove this</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cacheGroups.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getChunks</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cacheGroups;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第二种：对象</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cacheGroups </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> cacheGroups </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> results;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(cacheGroups)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> option </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cacheGroups[key];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (option </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (option </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> option </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          option </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            test: option</span></span>\n<span class="line"><span style="color:#E1E4E8;">          };</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> option </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">option</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (results </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">r</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(result) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [result]) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">({ key }, r);</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.name) result.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> result.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                result.chunksFilter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeChunksFilter</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">                  result.chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">                );</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }</span></span>\n<span class="line"><span style="color:#E1E4E8;">              results.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (SplitChunksPlugin.</span><span style="color:#B392F0;">checkTest</span><span style="color:#E1E4E8;">(option.test, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (results </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">          results.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">            key: key,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            priority: option.priority,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            getName:</span></span>\n<span class="line"><span style="color:#E1E4E8;">              SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeName</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">                name: option.name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                automaticNameDelimiter:</span></span>\n<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> option.automaticNameDelimiter </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> option.automaticNameDelimiter</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                automaticNamePrefix: option.automaticNamePrefix,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                automaticNameMaxLength:</span></span>\n<span class="line"><span style="color:#E1E4E8;">                  option.automaticNameMaxLength </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> automaticNameMaxLength</span></span>\n<span class="line"><span style="color:#E1E4E8;">              }) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            chunksFilter: SplitChunksPlugin.</span><span style="color:#B392F0;">normalizeChunksFilter</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">              option.chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">            ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            enforce: option.enforce,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            minSize: option.minSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            enforceSizeThreshold: option.enforceSizeThreshold,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            maxSize: option.maxSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            minChunks: option.minChunks,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            maxAsyncRequests: option.maxAsyncRequests,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            maxInitialRequests: option.maxInitialRequests,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            filename: option.filename,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            reuseExistingChunk: option.reuseExistingChunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> results;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第三种：默认 fallback</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>处理过程有三种：</p><ol><li><p>cacheGroups 是<strong>函数</strong>，根据形参的个数，来决定返回包裹后的 cacheGroups 还是配置的 cacheGroups；</p></li><li><p>cacheGroups 是<strong>对象</strong>，返回一个函数，当调用函数的时候，会循环所有的 key-value 键值对，处理逻辑如下：</p></li></ol><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 1. option 为 false 来禁用 webpack 默认 cacheGroups 分组</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        default: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        vendors: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 2. option 为正则或者字符串</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">common</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;common-&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 变成</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">common</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;common-&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 3. option 为函数，官方文档并没有提及到，再次吐槽一下官方文档</span></span>\n<span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">common</span><span style="color:#E1E4E8;"> () {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ({</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;abc&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunks: </span><span style="color:#9ECBFF;">&#39;initial&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      })</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 4. 根据 option.test 来返回 cacheGroups 分组结果</span></span>\n<span class="line"><span style="color:#E1E4E8;">static </span><span style="color:#B392F0;">checkTest</span><span style="color:#E1E4E8;">(test, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (test </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (test.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getChunks</span><span style="color:#E1E4E8;">());</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> test;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.nameForCondition </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(test)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunksIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk.name.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(test)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (test </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.nameForCondition </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">())) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunksIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(chunk.name)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 4.1 test不存在，代表所有 module 都能加入这个分组</span></span>\n<span class="line"><span style="color:#6A737D;">// 4.2 module 能否加入这个分组取决于 test 的布尔值</span></span>\n<span class="line"><span style="color:#6A737D;">// 4.3 test 为字符串或者正则，校验 module 的路径名称以及含有 module 的 chunks 的名称，满足任意条件即可</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>返回一个空函数</li></ol><p>getCacheGroups 的作用就是<strong>获取对应 module 命中了哪个 cacheGroup 分组</strong>，当然同一个 module 可以命中多个分组，后续会有优先级的判断。</p></li></ul><h3 id="二-钩入-compilation-hooks-optimizechunksadvanced" tabindex="-1"><a class="header-anchor" href="#二-钩入-compilation-hooks-optimizechunksadvanced" aria-hidden="true">#</a> 二. 钩入 compilation.hooks.optimizeChunksAdvanced</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.optimizeChunksAdvanced.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;SplitChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"></span></code></pre></div><p>optimizeChunksAdvanced hook 触发的时机是在调用 compilation.seal() 内部，seal 是一个非常重要的节点，这个阶段 webpack 已经根据配置的 entry 顺藤摸瓜，解析完所有的 modules，在 seal 内部会有各种各样的优化，同时也触发了各种各样优化的钩子，按照顺序大致分为以下的种类。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 第一步 触发 compilation.hooks.seal</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第二步 触发关于优化 Dependencies 的所有钩子</span></span>\n<span class="line"><span style="color:#E1E4E8;">optimizeDependenciesBasic </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeDependencies </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeDependenciesAdvanced </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> afterOptimizeDependencies</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第三步 先根据 entrypoints(webpack 所有的入口都会对应各自的 entrypoints) 生成对应的 chunks, chunkGroups 等等，接着调用 buildChunkGraph() 来构建 webpack 的 graph，这一步是最复杂的，其中 modules, chunks, chunkGroups 之间会形成 “图” 结构</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第四步 触发关于优化 Modules 的所有钩子</span></span>\n<span class="line"><span style="color:#E1E4E8;">optimizeModulesBasic </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeModules </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeModulesAdvanced </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> afterOptimizeModules</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 第五步 触发关于优化 Chunks 的所有钩子</span></span>\n<span class="line"><span style="color:#E1E4E8;">optimizeChunksBasic </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeChunks </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> optimizeChunksAdvanced </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> afterOptimizeChunks</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 后续的暂且不用关注...</span></span>\n<span class="line"></span></code></pre></div><p>从上面钩子的触发顺序来看，进入到 splitChunksPlugin 的时机是在构建 graph 结构之后，在这个时机，module 已经知道自己被哪些 chunk 依赖了，现在要做的事情就是从这些 chunk 里面，把 module 分离出来，组成若干个新 chunk，并且新老 chunk 要建立一定的联系，这样最后在将 chunk 转成 code 的时候才能知道 chunk 之间的依赖顺序，从而保证运行时的 js 不报错。下面来看看具体的逻辑：</p><h3 id="三-compilation-hooks-optimizechunksadvanced-的-handler-剖析" tabindex="-1"><a class="header-anchor" href="#三-compilation-hooks-optimizechunksadvanced-的-handler-剖析" aria-hidden="true">#</a> 三. compilation.hooks.optimizeChunksAdvanced 的 handler 剖析</h3><p>handler 的主要的逻辑可以划分为以下几个部分：</p><ol><li><p><strong>标记 splitChunks 在多次 unseal过程中只触发一次</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (alreadyOptimized) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">alreadyOptimized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span></code></pre></div><p>还不知道这段逻辑是为啥，按道理无论是 watch 触发重新编译，还是 compilation 调用 unseal，alreadyOptimized 都是 false。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">compilation.hooks.unseal.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SplitChunksPlugin&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  alreadyOptimized </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span></code></pre></div><p>这个步骤不是我们关注的核心逻辑，继续往下。</p></li><li><p><strong>根据 module 的被引用的 chunk 和 被引用的 chunk 数量分组</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 先分给 chunk 各自的序号</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">indexMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  indexMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunk, index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(chunks, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> indexMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(c))</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(compareNumbers)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 根据 module 与 chunks 的引用关系，记录在 chunkSetsInGraph</span></span>\n<span class="line"><span style="color:#6A737D;">// 比如 moduleA 被 chunk1 和 chunk2 同时引用的话，就是如下结构</span></span>\n<span class="line"><span style="color:#6A737D;">// { &quot;1,2&quot;: [chunk1, chunk2] }</span></span>\n<span class="line"><span style="color:#6A737D;">// 这样做的目的是为了后期包含 moduleA 的 newChunk 的时候，建立 chunk1、chunk2 与 newChunk 的联系</span></span>\n<span class="line"><span style="color:#6A737D;">// 这样才能输出逻辑正确的 js 文件</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkSetsInGraph</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunksIterable);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunkSetsInGraph.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(chunksKey)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkSetsInGraph.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunksKey, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunksIterable));</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 根据 module 被 chunk 引用的数量分组，用来后期 cacheGroups.minChunks 的校验</span></span>\n<span class="line"><span style="color:#6A737D;">// 比如 moduleA 属于 chunk1，moduleB 属于 chunk2，结构如下</span></span>\n<span class="line"><span style="color:#6A737D;">// { &quot;1&quot; : [ [chunk1] ], &quot;2&quot; : [ [chunk2] ]}</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkSetsByCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksSet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkSetsInGraph.</span><span style="color:#B392F0;">values</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunksSet.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkSetsByCount.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(count);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (array </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkSetsByCount.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(count, array);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  array.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunksSet);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>知道 module 被哪些 chunks 依赖之后，后期就能将 module 加入到满足条件的 cacheGroups 分组对象当中。</p></li><li><p><strong>遍历所有 modules，将 module 划分到对应的 cacheGroups 分组对象，最后存入 chunksInfoMap</strong></p><p>在这个过程中，同一个 module 可能满足多个 cacheGroups 分组条件，这个没关系，后期会对 chunksInfoMap 做优先级的处理。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3.1 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3.2 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3.3 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>3.1 获取 module 匹配的 cacheGroups 分组</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// getCacheGroups 来自于初始化阶段返回的函数</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cacheGroups </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.</span><span style="color:#B392F0;">getCacheGroups</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(cacheGroups) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> cacheGroups.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>3.2 获取 module 可能被 chunks 引用的所有组合</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">combinationsCache</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Map&lt;string, Set&lt;Chunk&gt;[]&gt;</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCombinations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksSet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkSetsInGraph.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [chunksSet];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunksSet.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setArray</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunkSetsByCount) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 遍历所有的子集</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (count </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> chunksSet.size) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> setArray) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isSubset</span><span style="color:#E1E4E8;">(chunksSet, set)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            array.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(set);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> array;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunksIterable);</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> combs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> combinationsCache.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunksKey);</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (combs </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  combs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCombinations</span><span style="color:#E1E4E8;">(chunksKey);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  combinationsCache.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunksKey, combs);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>getCombinations 内部有一个 for 循环特别难理解，为什么要加这么一段代码呢，得想清一些问题，举个例子</p><div class="language-html ext-html"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">1. 假如有三个 webpack 入口 entry1, entry2, entry3</span></span>\n<span class="line"><span style="color:#E1E4E8;">2. entry1 依赖了 module1, module2</span></span>\n<span class="line"><span style="color:#E1E4E8;">3. entry2 依赖了 module1, module2</span></span>\n<span class="line"><span style="color:#E1E4E8;">4. entry3 依赖了 module2</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">如果 module2 的体积小于 cacheGroups 的 minSize 限制，会导致 module2 不能加入分组，</span></span>\n<span class="line"><span style="color:#E1E4E8;">然而如果 module2 + module1 的体积满足其他分组的 minSize，那么 module2 是可以加入到其他分组，因为 module2 可以作为三个 chunk 的共同依赖，也可以是 chunk1 和 chunk2 的共同依赖。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">换个角度来思考这个问题，module2 因为被三个 entry chunk 依赖，但是由于 minSize 的限制导致无法单独输出到一个 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">但是 module1 和 module2 可以绑定在一起，作为 entry1 和 entry2 的共同依赖，输出到另外一个 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">这也就是 isSubset 逻辑必不可少的原因</span></span>\n<span class="line"></span></code></pre></div><ul><li>3.3 根据 cacheGroups 配置决定 module 加入到哪些分组对象</li></ul><p><em>第一步，cacheGroups 的配置项合并 splitChunks top-level 级别的“全局配置”，传给 addModuleToChunksInfoMap</em></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cacheGroupSource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> cacheGroups) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">minSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroupSource.minSize </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.minSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.minSize;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enforceSizeThreshold</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroupSource.enforceSizeThreshold </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.enforceSizeThreshold</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.enforceSizeThreshold;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cacheGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    key: cacheGroupSource.key,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    priority: cacheGroupSource.priority </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunksFilter:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.chunksFilter </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.chunksFilter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minSizeForMaxSize:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.minSize </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.minSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.minSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    enforceSizeThreshold,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    maxSize:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.maxSize </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.maxSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.maxSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minChunks:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.minChunks </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.minChunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.minChunks,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    maxAsyncRequests:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.maxAsyncRequests </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.maxAsyncRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.maxAsyncRequests,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    maxInitialRequests:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.maxInitialRequests </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.maxInitialRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> cacheGroupSource.enforce</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.maxInitialRequests,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    getName:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.getName </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.getName</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.getName,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.filename </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.filename</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.filename,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    automaticNameDelimiter:</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroupSource.automaticNameDelimiter </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> cacheGroupSource.automaticNameDelimiter</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    reuseExistingChunk: cacheGroupSource.reuseExistingChunk,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    _validateSize: minSize </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    _conditionalEnforce: enforceSizeThreshold </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>\n<span class="line"><span style="color:#E1E4E8;">  };</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p><em>第二步：将所有的分组对象都加入到 chunksInfoMap</em></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 遍历对该 module 引用的 chunks 的所有组合</span></span>\n<span class="line"><span style="color:#6A737D;">// 目的就是把 module 划分到符合条件的 cacheGroups 分组</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkCombination</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> combs) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果引用当前 module 的 chunks 数量小于 minChunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkCombination.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cacheGroup.minChunks) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">selectedChunks</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">selectedChunksKey</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelectedChunks</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkCombination,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroup.chunksFilter</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">addModuleToChunksInfoMap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroup,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroupIndex,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    selectedChunks,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    selectedChunksKey,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 根据 chunksSet 缓存，提升性能</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getSelectedChunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chunkFilter</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selectedChunksCacheByChunksSet.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunks);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entry </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WeakMap</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    selectedChunksCacheByChunksSet.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunks, entry);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SelectedChunksResult}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> entry2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunkFilter);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entry2 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Chunk[]}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">selectedChunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">chunkFilter</span><span style="color:#E1E4E8;">(chunk)) selectedChunks.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    entry2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunks: selectedChunks,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      key: </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(selectedChunks)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    entry.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(chunkFilter, entry2);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> entry2;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><p>getSelectedChunks 的作用就是缓存，防止重复获取已经取过的 chunks 组合，内部的 chunkFilter 就是过滤不符合条件的 chunk，举个例子，假如 module 被 initial 和 async chunk 同时依赖，而 cacheGroups 配置的又是 <code>&#39;initial&#39;</code>，那么 async chunk 就会被剔除，换句话来说，async chunk 自己就会打包一份 module 代码进去，而不是依赖由 module 组成的 newChunk。</p><p>addModuleToChunksInfoMap 是整个插件中特别重要的一个环节，它缓存了所有的分组信息，每个分组信息之后对应一个 newChunk。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksInfoMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addModuleToChunksInfoMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">cacheGroup</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">cacheGroupIndex</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">selectedChunks</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">selectedChunksKey</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span></span>\n<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 校验 minChunks 配置</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selectedChunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> cacheGroup.minChunks) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取 split chunk 的名称</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cacheGroup.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    selectedChunks,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroup.key</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    cacheGroup.key </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (name </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">` name:${</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">` chunks:${</span><span style="color:#E1E4E8;">selectedChunksKey</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 cacheGroups 的分组对象配置，划分对应的分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// module 会丢进 modules， 引用该 module 的 chunk 会丢进 chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 记录该分组的 size</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunksInfoMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunksInfoMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      key,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      (info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        modules: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, sortByIdentifier),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        cacheGroup,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        cacheGroupIndex,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        size: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        reuseableChunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunksKeys: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">      })</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.modules.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  info.modules.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.size </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> oldSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    info.size </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldChunksKeysSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.chunksKeys.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  info.chunksKeys.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(selectedChunksKey);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldChunksKeysSize </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> info.chunksKeys.size) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> selectedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      info.chunks.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><p>每一个 cacheGroups 分组的 info 数据结构如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(info </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  modules: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, sortByIdentifier),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  cacheGroup,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  cacheGroupIndex,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  name,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  size: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  chunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  reuseableChunks: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  chunksKeys: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span></code></pre></div><p>在 info 里面存放了满足该分组条件的 modules，以及引用了这些 modules 的 chunks，还记录这个即将生成的 newChunk 的 size 信息，当然也有可能因为 minSize 和 maxSize 限制导致这个 newChunk 无法生成，胎死腹中！</p><p>ok，准备好所有分组信息之后，继续往下走～</p></li><li><p><strong>剔除体积未达到 minSize 的分组</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    info.cacheGroup._validateSize </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    info.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> info.cacheGroup.minSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(pair[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>根据优先级找出满足条件的 cacheGroups 分组</strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (chunksInfoMap.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5.1 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5.2 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5.3 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5.4 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>5.1 找出优先级最高的分组</li></ul><p>compareEntries 会依据 cacheGroups 的 info 给分组对象排序，优先级如下：</p><p>priority &gt; chunksSize &gt; info.size &gt; cacheGroupIndex &gt; modulesSize &gt; moduleIdentifier</p><p>一般来说我们都会配置 priority。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestEntryKey;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestEntry;</span></span>\n<span class="line"><span style="color:#6A737D;">// 不断的对比优先级</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (bestEntry </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bestEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bestEntryKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">compareEntries</span><span style="color:#E1E4E8;">(bestEntry, info) </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bestEntry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    bestEntryKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 得到优先级最高的分组</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bestEntry;</span></span>\n<span class="line"><span style="color:#E1E4E8;">chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(bestEntryKey);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareEntries</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. by priority</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diffPriority</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.cacheGroup.priority </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b.cacheGroup.priority;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (diffPriority) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> diffPriority;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 2. by number of chunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diffCount</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.chunks.size </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b.chunks.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (diffCount) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> diffCount;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 3. by size reduction</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aSizeReduce</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.size </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (a.chunks.size </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bSizeReduce</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.size </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (b.chunks.size </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diffSizeReduce</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aSizeReduce </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> bSizeReduce;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (diffSizeReduce) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> diffSizeReduce;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 4. by cache group index</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">indexDiff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.cacheGroupIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> a.cacheGroupIndex;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (indexDiff) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> indexDiff;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 5. by number of modules (to be able to compare by identifier)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulesA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.modules;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">modulesB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.modules;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">diff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modulesA.size </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> modulesB.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (diff) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> diff;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 6. by module identifiers</span></span>\n<span class="line"><span style="color:#E1E4E8;">  modulesA.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  modulesB.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modulesA[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bI</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> modulesB[</span><span style="color:#79B8FF;">Symbol</span><span style="color:#E1E4E8;">.iterator]();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aI.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bItem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bI.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aItem.done) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">aModuleIdentifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> aItem.value.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bModuleIdentifier</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bItem.value.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleIdentifier </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> bModuleIdentifier) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (aModuleIdentifier </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bModuleIdentifier) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><ul><li>5.2 找出优先级最高的分组，并且依据分组的 info 生成 newChunk</li></ul><p><em>第一步：判断是否有可复用的 chunk</em></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> chunkName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.name;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newChunk;</span></span>\n<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isReused </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">// 复用现有的 chunk</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.cacheGroup.reuseExistingChunk) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.chunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果复用的 chunk 内部含有的模块数量和分组的模块数量不同，则不复用</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.</span><span style="color:#B392F0;">getNumberOfModules</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> item.modules.size) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果复用的 chunk 是含有 entryModule，也就是我们配置的 webpack 入口模块，则不能拿来复用</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 为什么呢？因为入口模块可能含有 webpack runtime bootstrap 代码，会导致复用的 chunk 无法集成现有的 entry chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 接着校验复用的 chunk 必须含有所有的分组的模块，因为上一步只是保证了数量一模一样</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 综合来看就是必须有一个 asyncChunk，并且其中已有的 modules 与划分到 cacheGroups 分组里面的 modules 相同，这样才能保证复用 chunk 成功</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.</span><span style="color:#B392F0;">containsModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">newChunk </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">newChunk.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newChunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.name </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> newChunk.name.</span><span style="color:#79B8FF;">length</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newChunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.name </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> newChunk.name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.name </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> newChunk.name</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      newChunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunkName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标记为复用 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    isReused </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 过滤掉可能复用的 chunk</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">selectedChunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(item.chunks).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunkName </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> chunkName) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">newChunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span></code></pre></div><p>什么场景下才会复用一个已有的 chunk 呢，比如以下场景：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// entry.js webpack 入口模块</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// a.js</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    runtimeChunk: </span><span style="color:#9ECBFF;">&#39;single&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      minSize: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        default: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          chunks: </span><span style="color:#9ECBFF;">&#39;async&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>a 模块已经属于 async chunk，由于 a 模块命中了 default cacheGroups 分组，那么分离出来的 chunk 会直接复用已有的 async chunk。</p><p><em>第二步：校验即将分离出 newChunk 的 usedChunks 是否满足 maxInitialRequests 和 maxAsyncRequests</em></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">enforced</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">  item.cacheGroup._conditionalEnforce </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  item.size </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> item.cacheGroup.enforceSizeThreshold;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selectedChunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">usedChunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(selectedChunks);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 如果 maxInitialRequests 和 maxAsyncRequests 都是有理数</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">enforced </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(item.cacheGroup.maxInitialRequests) </span><span style="color:#F97583;">||</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Number</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isFinite</span><span style="color:#E1E4E8;">(item.cacheGroup.maxAsyncRequests))</span></span>\n<span class="line"><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据 usedChunk 的类型，决定用哪一个配置项来校验</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// initial chunk 则校验 maxInitialRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// async chunk 则校验 maxAsyncRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">maxRequests</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">isOnlyInitial</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> item.cacheGroup.maxInitialRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> chunk.</span><span style="color:#B392F0;">canBeInitial</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          item.cacheGroup.maxInitialRequests,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          item.cacheGroup.maxAsyncRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> item.cacheGroup.maxAsyncRequests;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">isFinite</span><span style="color:#E1E4E8;">(maxRequests) </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">getRequests</span><span style="color:#E1E4E8;">(chunk) </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> maxRequests</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果超过了对应的配置，那么剔除 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 换句话来说 newChunk 将不会从这个 chunk 分离</span></span>\n<span class="line"><span style="color:#E1E4E8;">      usedChunks.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 为了加载这个 chunk，造成的总下载量</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRequests</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> requests </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunkGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunk.groupsIterable) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    requests </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(requests, chunkGroup.chunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> requests;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div><p>\b以上的 maxInitialRequests 和 maxAsyncRequests 配置可能让你很疑惑，要完全理解这个，要从 webpack 的运行时来理解。</p><p>首先 splitChunks 的作用就是<strong>从已有的 chunks 将 module 分离出去（<strong>上述的 usedChunks</strong>），形成一个 newChunk，usedChunks 再依赖 newChunk 的加载即可</strong>。</p><p>假如是一个 entryChunk 分离了 newChunk，这个 entryChunk 必定要等待 newChunk 加载完成，打出来的代码类似于如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap </span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// add entry module to deferred list</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \tdeferredModules.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;newChunk&quot;</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#6A737D;">// run deferred modules when ready</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/******/</span><span style="color:#E1E4E8;"> \t</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkDeferredModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">})({})</span></span>\n<span class="line"></span></code></pre></div><p>也就是说，你得手动在 script 里面引入 newChunk 这个 js，entryChunk 才会执行内部逻辑，\b这也就是起名为 maxInitialRequests 的原因。</p><p>假如是一个 asyncChunk 分离了 newChunk, 并且 asyncChunk 被 entryChunk 消费，那么 entryChunk 会利用两个 __webpack_require__.e 加载 asyncChunk 和 newChunk，并且等到全部的依赖加载完毕才执行内部逻辑，其实也很符合我们的预期，首先 asyncChunk 是异步请求的，现在 asyncChunk 内部分离了 module 组成了 newChunk，那么 entryChunk 作为消费者，必须等待两个 chunk 同时 ready，类似的代码如下</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">modules</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// webpackBootstrap </span></span>\n<span class="line"><span style="color:#E1E4E8;">})({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;./entry.js&quot;</span><span style="color:#E1E4E8;">: (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">__webpack_require__</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 保证两个 chunk 同时加载完毕 </span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asyncChunk&quot;</span><span style="color:#E1E4E8;">), __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;newChuk&quot;</span><span style="color:#E1E4E8;">)])</span></span>\n<span class="line"><span style="color:#E1E4E8;">  })</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span>\n<span class="line"></span></code></pre></div><p>这两个 chunk 是代码运行时通过 script 加载的，所以起名为 maxAsyncRequests。</p><p>好吧，想要理解这些配置，必须得对 webpack 有很大程度的掌握，所以说文档不好写啊～</p><p><em>第三步：检查是否有 chunks 被剔除，剔除了 chunks 会导致 newChunk 生成失败</em></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 校验 chunk 是含有分组信息的 module，否则剔除 chunk，什么情况下会发生呢？</span></span>\n<span class="line"><span style="color:#6A737D;">// 首先同一个 module 是可以被多个 cacheGroups 分组归纳进去，并且有优先级</span></span>\n<span class="line"><span style="color:#6A737D;">// 假如 module 已经伴随着上一轮优先级更高的 newChunk 分割出去了，</span></span>\n<span class="line"><span style="color:#6A737D;">// 则不需要再生成含有 module 的 newChunk 了</span></span>\n<span class="line"><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk.</span><span style="color:#B392F0;">containsModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">outer</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  usedChunks.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(chunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 可能在第二步 或者 outer 这个逻辑里面剔除了 chunk</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedChunks.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> selectedChunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 再次校验 chunks 的数量是否符合 minChunks</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (usedChunks.size </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> item.cacheGroup.minChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunksArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(usedChunks);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 重新生成新的 cacheGroups 分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addModuleToChunksInfoMap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        item.cacheGroup,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        item.cacheGroupIndex,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunksArr,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(usedChunks),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">module</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 放弃这次 newChunk 的生成，进行下一轮 cacheGroups 分组的处理</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>5.3 根据 cacheGroups 分组的 info 生成对应的 newChunk</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 首先生成 empty chunk</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isReused) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  newChunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">addChunk</span><span style="color:#E1E4E8;">(chunkName);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 建立 usedChunks 与即将分离的 newChunk 的联系</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Add graph connections for splitted chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  chunk.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(newChunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 记录 chunk 的生成原因</span></span>\n<span class="line"><span style="color:#E1E4E8;">newChunk.chunkReason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> isReused</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;reused as split chunk&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;split chunk&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.cacheGroup.key) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  newChunk.chunkReason </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">` (cache group: ${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">cacheGroup</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">})`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 如果新生成的 chunk 与入口 chunk 同名，那么移除入口 chunk，多个 entry 入口打包的时候才会遇见</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunkName) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  newChunk.chunkReason </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">` (name: ${</span><span style="color:#E1E4E8;">chunkName</span><span style="color:#9ECBFF;">})`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entrypoint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.entrypoints.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunkName);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entrypoint) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.entrypoints.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(chunkName);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    entrypoint.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    newChunk.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 覆盖 newChunk 的名称，此配置项只作用在 initial chunks 分离出来的 newChunk</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.cacheGroup.filename) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">newChunk.</span><span style="color:#B392F0;">isOnlyInitial</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;SplitChunksPlugin: You are trying to set a filename for a chunk which is (also) loaded on demand. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;The runtime can only handle loading of chunks which match the chunkFilename schema. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;Using a custom filename would fail at runtime. &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">`(cache group: ${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">cacheGroup</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">})`</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  newChunk.filenameTemplate </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.cacheGroup.filename;</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#6A737D;">// 如果是新生成的 chunk</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isReused) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunkCondition </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果 module 是 ExternalModule，并且 newChunk 是从 async chunk 分离出来的</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 不需要把 module 丢进 newChunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">chunkCondition</span><span style="color:#E1E4E8;">(newChunk)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// cacheGroups 分组 info 的 modules 全部丢进 newChunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    GraphHelpers.</span><span style="color:#B392F0;">connectChunkAndModule</span><span style="color:#E1E4E8;">(newChunk, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 断开 module 与 原有 chunk 的连接，</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 连接关系已经通过 chunk.split(newChunk) 建立了</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 实际上 usedChunk 和 newChunk 作为兄弟节点，存放在 usedChunk 的 chunksGroup</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 方便后期 render -&gt; code 的转化</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.</span><span style="color:#B392F0;">removeModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">rewriteChunkInReasons</span><span style="color:#E1E4E8;">(chunk, [newChunk]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果是复用已有的 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> usedChunks) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.</span><span style="color:#B392F0;">removeModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">rewriteChunkInReasons</span><span style="color:#E1E4E8;">(chunk, [newChunk]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>5.3 的代码逻辑主要是生成 newChunk，建立 modules 与 newChunk 的连接，并且断开 modules 与原先的 usedChunks 的连接，同时 newChunk 与 usedChunks 作为兄弟节点保存在 chunksGroup 里面，代表着 newChunk 是从 usedChunks 分离出来的。</p><p>如果 usedChunk 的类型是 <code>&#39;inital&#39;</code>，那么在生成 webpack runtime bootstrap 的时候会有以下类似的代码：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">deferredModules.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;newChunk&quot;</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#6A737D;">// run deferred modules when ready</span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkDeferredModules</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span></code></pre></div><p>如果 usedChunk 的类型是 <code>&#39;async&#39;</code>，那么消费这个 async chunk 的代码的生成形式如下：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// newChunk 是从 asyncChunk split 出来的</span></span>\n<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./asyncChunk&#39;</span><span style="color:#E1E4E8;">), __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./newChunk&#39;</span><span style="color:#E1E4E8;">)]).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">))</span></span>\n<span class="line"></span></code></pre></div><ul><li>5.4 将该分组下面的 modules 从其他的分组中剔除，等待最后的 maxSize 校验</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 配置分组的最大体积限制</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.cacheGroup.maxSize </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldMaxSizeSettings</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> maxSizeQueueMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(newChunk);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  maxSizeQueueMap.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(newChunk, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minSize: </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      oldMaxSizeSettings </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> oldMaxSizeSettings.minSize </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      item.cacheGroup.minSizeForMaxSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    maxSize: </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      oldMaxSizeSettings </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> oldMaxSizeSettings.maxSize </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      item.cacheGroup.maxSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    automaticNameDelimiter: item.cacheGroup.automaticNameDelimiter,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    keys: oldMaxSizeSettings</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> oldMaxSizeSettings.keys.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(item.cacheGroup.key)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [item.cacheGroup.key]</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// 既然 module 已经跟着这一轮的 newChunk 输出了，</span></span>\n<span class="line"><span style="color:#6A737D;">// 后期所有的分组处理应该剔除当前 module</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">info</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> chunksInfoMap) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isOverlap</span><span style="color:#E1E4E8;">(info.chunks, usedChunks)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info.modules.size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> item.modules) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      info.modules.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.size </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> oldSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      info.size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getModulesSize</span><span style="color:#E1E4E8;">(info.modules);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">        info.cacheGroup._validateSize </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        info.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> info.cacheGroup.minSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (info.modules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        chunksInfoMap.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>所有的 chunks 已经 ready，进行最后的 maxSize 的校验</strong></p><p>这一步的话，可以配置 maxSize 配置，对 chunks 再进行更细粒度的拆分，不过我们无法做到精确的 minSize 和 maxSize 的控制，因为 module 已经是最小的可拆分单元，一旦 module 不可再拆分的话，打出来的 chunks 是可能违背 minSize 和 maxSize 的条件的。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// 对所有的 chunks 进行处理(包括已有和新生成的)</span></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> compilation.chunks.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 6.1 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 6.2 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 6.3 ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>6.1 处理 maxSize 和 minSize</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">minSize</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">maxSize</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">automaticNameDelimiter</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">keys</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">    maxSizeQueueMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(chunk) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.fallbackCacheGroup;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果不设置 maxSize 直接退出</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">maxSize) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#6A737D;">// minxSize 和 maxSize 应该是一个合理的值，要不然会抛出一个 warning</span></span>\n<span class="line"><span style="color:#6A737D;">// 如果不合理， webpack 会进行强行的干预</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (minSize </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> maxSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">warningKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">`${</span><span style="color:#E1E4E8;">keys</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">keys</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">join</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">} ${</span><span style="color:#E1E4E8;">minSize</span><span style="color:#9ECBFF;">} ${</span><span style="color:#E1E4E8;">maxSize</span><span style="color:#9ECBFF;">}`</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">incorrectMinMaxSizeSet.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(warningKey)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    incorrectMinMaxSizeSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(warningKey);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.warnings.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MinMaxSizeWarning</span><span style="color:#E1E4E8;">(keys, minSize, maxSize)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li>6.2 对超过 maxSize 的 chunk 再进行分割，直到割无可割！</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">results</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">deterministicGroupingForModules</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  maxSize: </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(minSize, maxSize),</span></span>\n<span class="line"><span style="color:#E1E4E8;">  minSize,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  items: chunk.modulesIterable,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ident</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contextify</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.options.context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">identifier</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.nameForCondition</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contextify</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">          compilation.options.context,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">nameForCondition</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">        )</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> ident.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">!</span><span style="color:#F97583;">|</span><span style="color:#85E89D;font-weight:bold;">\\?</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">?!]</span><span style="color:#F97583;">*$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fullKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> automaticNameDelimiter </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashFilename</span><span style="color:#E1E4E8;">(ident);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fullKey.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/?]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getSize</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#E1E4E8;">results.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span></code></pre></div><p>webpack 官方称这个算法是 <code>deterministic</code>，具体的原因也不知道，只能看看算法的实现。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">similarity</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">l</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">min</span><span style="color:#E1E4E8;">(a.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, b.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> l; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ca</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cb</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    dist </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">max</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Math</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">abs</span><span style="color:#E1E4E8;">(ca </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> cb));</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dist;</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Group</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">nodes</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">similarities</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.nodes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.similarities </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> similarities;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nodes.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> node.size, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#FFAB70;">maxSize</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">minSize</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">items</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getSize</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">getKey</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将 module 转化成 Node 的类型，同时记录 key, size</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    items,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">(item, </span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(item), </span><span style="color:#B392F0;">getSize</span><span style="color:#E1E4E8;">(item))</span></span>\n<span class="line"><span style="color:#E1E4E8;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 key 来排序</span></span>\n<span class="line"><span style="color:#E1E4E8;">  nodes.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> nodes) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 既然 module 已经比 maxSize 还大，我们无可奈何，直接作为新分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (node.size </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> maxSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Group</span><span style="color:#E1E4E8;">([node], []));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 推入待处理的数组</span></span>\n<span class="line"><span style="color:#E1E4E8;">      initialNodes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (initialNodes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 根据 module 的 key 来计算相邻 module 的相似度</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 模块的路径名称和模块名称都会影响相似度</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">similarities</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> initialNodes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialNodes[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> initialNodes[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">      similarities.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">similarity</span><span style="color:#E1E4E8;">(a.key, b.key));</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 初始化一个 Group 对象，对象内部记录了所有 modules 的体积综合</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Group</span><span style="color:#E1E4E8;">(initialNodes, similarities);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果当前 Group 的体积比 minSize 还小</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (initialGroup.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> minSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 直接找到最小体积的分组，然后把 module 全部塞进去，可能会违背 maxSize 的限制，不过已经无所谓了</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">smallestGroup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">min</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          min.size </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> group.size </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> group </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> min</span></span>\n<span class="line"><span style="color:#E1E4E8;">        );</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> initialGroup.nodes) smallestGroup.nodes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(node);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        smallestGroup.nodes.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.key </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b.key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果目前没有最小体积的分组，虽然比 minSize 还小，我们依然无可奈何，强行将它输出成一个分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">        result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(initialGroup);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [initialGroup];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (queue.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 当前分组已经比 maxSize 还小，直接将它输出成一个分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (group.size </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> maxSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 从两端分别向中间靠近，找到它们的重叠区域</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> leftSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (leftSize </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> minSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          leftSize </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> group.nodes[left].size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> group.nodes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rightSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (rightSize </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> minSize) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          rightSize </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> group.nodes[right].size;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          right</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果产出交叉区域，直接将当前 group 作为一个分组</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> right) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// can&#39;t split group while holding minSize</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// because minSize is preferred of maxSize we return</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// the group here even while it&#39;s too big</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// To avoid this make sure maxSize &gt; minSize * 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">          result.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果未产生交叉区域，根据相似度最高的 similarity 作为分割点</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> right) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> best </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> bestSimilarity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> group.similarities[best];</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> left; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> right; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">similarity</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> group.similarities[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (similarity </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> bestSimilarity) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              best </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>\n<span class="line"><span style="color:#E1E4E8;">              bestSimilarity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> similarity;</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          }</span></span>\n<span class="line"><span style="color:#E1E4E8;">          left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> best </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> best;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 先压右边区域，再压左边区域</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rightNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [group.nodes[right </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rightSimilaries</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> group.nodes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          rightSimilaries.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group.similarities[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          rightNodes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group.nodes[i]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        queue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Group</span><span style="color:#E1E4E8;">(rightNodes, rightSimilaries));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leftNodes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [group.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leftSimilaries</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> left; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          leftSimilaries.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group.similarities[i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          leftNodes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(group.nodes[i]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">        queue.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Group</span><span style="color:#E1E4E8;">(leftNodes, leftSimilaries));</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 最后分组根据 key 排序</span></span>\n<span class="line"><span style="color:#E1E4E8;">  result.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].key </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> b.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].key </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> b.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].key) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重新给每个分组分配新的名称</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> result.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">first</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> group.nodes[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">last</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> group.nodes[group.nodes.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(first.key, last.key);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    group.key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 返回结果</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      key: group.key,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      items: group.nodes.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> node.item),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      size: group.size</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">  });</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre></div><p>其中最复杂的就是两端从中间前进的算法，根据 similarity 找到最好的分割点，在这之间，可能违背 minSize 和 maxSize 的配置，强行将某些 modules 输出成一个 chunk，不过我们也很少配置 maxSize，至于算法为什么这么写，我也百思不得其解，在我看来 similarity 的计算取决于 module 的名称和路径，感觉有点太随机了？</p><ul><li>6.3 重新生成新的细粒度的 chunk</li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> results.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">group</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> results[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据 hidePathInfo 决定是否对 chunkName 进行哈希</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.hidePathInfo</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hashFilename</span><span style="color:#E1E4E8;">(group.key)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> group.key;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.name</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> chunk.name </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> automaticNameDelimiter </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> key</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> name.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span></span>\n<span class="line"><span style="color:#E1E4E8;">      name.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      automaticNameDelimiter </span><span style="color:#F97583;">+</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">hashFilename</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newPart;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将原本大体积的 chunk 分割成更细粒度的 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> results.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    newPart </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.</span><span style="color:#B392F0;">addChunk</span><span style="color:#E1E4E8;">(name);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunk.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(newPart);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    newPart.chunkReason </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk.chunkReason;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> group.items) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.chunkCondition </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">chunkCondition</span><span style="color:#E1E4E8;">(newPart)) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      GraphHelpers.</span><span style="color:#B392F0;">connectChunkAndModule</span><span style="color:#E1E4E8;">(newPart, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.</span><span style="color:#B392F0;">removeModule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">rewriteChunkInReasons</span><span style="color:#E1E4E8;">(chunk, [newPart]);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 最后一个分割单元 chunk 直接复用大体积的 chunk</span></span>\n<span class="line"><span style="color:#E1E4E8;">    newPart </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunk;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    chunk.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></li></ol><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h3><p>梳理了一下流程图，大致如下：</p>',30),o=(0,l.Wm)("h3",{id:"总结",tabindex:"-1"},[(0,l.Wm)("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),(0,l.Uk)(" 总结")],-1),e=(0,l.Wm)("p",null,"整体逻辑非常清晰，但前提是要对 webpack 有一定的了解，否则一头雾水。里面也用了 deterministicGrouping 的算法，从问题的本质来看是将一组总和超过 maxSize 的数字，进行二次分割，尽可能的使得子分组的大小接近 maxSize，当然 webpack 似乎考虑的更多，官方的原话如下：",-1),E=(0,l.Wm)("blockquote",null,[(0,l.Wm)("p",null,"The algorithm is deterministic and changes to the modules will only have local impact. So that it is usable when using long term caching and doesn't require records")],-1),c=(0,l.Wm)("p",null,"似乎跟 seal 阶段的 record* hooks 有关，不太确定，可能等到对 webpack 有一个全面的认知才能够猜得到作者的意图吧。",-1),t={render:function(s,n){return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("img",{src:s.$withBase("/assets/splitChunks_flowchart.png"),height:"500"},null,8,["src"]),o,e,E,c],64)}}}}]);