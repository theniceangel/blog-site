(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[9478],{9984:(l,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>a});const a={key:"v-94eff390",path:"/webpack4/webpack-process/compiling.html",title:"编译进行时",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"compiler.compile(onCompiled)",slug:"compiler-compile-oncompiled",children:[]},{level:2,title:"this.newCompilationParams()",slug:"this-newcompilationparams",children:[]},{level:2,title:"beforeCompile hook 与 compile hook",slug:"beforecompile-hook-与-compile-hook",children:[]},{level:2,title:"this.newCompilation(params)",slug:"this-newcompilation-params",children:[]}],filePathRelative:"webpack4/webpack-process/compiling.md",git:{updatedTime:1630856917e3,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},6312:(l,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>Un});var a=s(6252);const o=(0,a.uE)('<h1 id="编译进行时" tabindex="-1"><a class="header-anchor" href="#编译进行时" aria-hidden="true">#</a> 编译进行时</h1><h2 id="compiler-compile-oncompiled" tabindex="-1"><a class="header-anchor" href="#compiler-compile-oncompiled" aria-hidden="true">#</a> compiler.compile(onCompiled)</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第一步</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">newCompilationParams</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 第二步</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.beforeCompile.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(params, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.compile.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(params);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 第三步</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">newCompilation</span><span style="color:#E1E4E8;">(params);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 第四步</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.make.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(compilation, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 第五步：TODO</span></span>\n<span class="line"><span style="color:#E1E4E8;">        compilation.</span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">          compilation.</span><span style="color:#B392F0;">seal</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.afterCompile.</span><span style="color:#B392F0;">callAsync</span><span style="color:#E1E4E8;">(compilation, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, compilation);</span></span>\n<span class="line"><span style="color:#E1E4E8;">            });</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"><span style="color:#E1E4E8;">      });</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>第一步调用 <code>this.newCompilationParams</code> 生成 normalModuleFactory、contextModuleFactory 实例。</p><h2 id="this-newcompilationparams" tabindex="-1"><a class="header-anchor" href="#this-newcompilationparams" aria-hidden="true">#</a> this.newCompilationParams()</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newCompilationParams</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      normalModuleFactory: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createNormalModuleFactory</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      contextModuleFactory: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createContextModuleFactory</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilationDependencies: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// TODO</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> params;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li><p><strong><code>createNormalModuleFactory</code></strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createNormalModuleFactory</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">normalModuleFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NormalModuleFactory</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.context, </span><span style="color:#6A737D;">// 运行 webpack 构建的上下文路径</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory, </span><span style="color:#6A737D;">// ResolverFactory 实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.module </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {} </span><span style="color:#6A737D;">// webpack 关于 module 的配置</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发 normalModuleFactory hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.normalModuleFactory.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(normalModuleFactory);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> normalModuleFactory;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>normalModuleFactory 在 webpack 的一次构建中扮演着特别重要的角色，它是一个工厂实例，作用是为了生成 normalModule，在 webpack 的生态里面，绝大部分的模块都是 normalModule。</p></li><li><p><strong><code>createContextModuleFactory</code></strong></p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createContextModuleFactory</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contextModuleFactory</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContextModuleFactory</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发 contextModuleFactory hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.contextModuleFactory.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(contextModuleFactory);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> contextModuleFactory;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>contextModuleFactory 在 webpack 的一次构建中扮演着特别重要的角色，它是一个工厂函数，生成的 module 都是 contextModule。</p><p>// TODO ContextModule 的详解。</p></li></ul><p>第一步生成的 params 在后面生成 compilation 的时候会用到，第二步执行 beforeCompile 与 compile hook。</p><h2 id="beforecompile-hook-与-compile-hook" tabindex="-1"><a class="header-anchor" href="#beforecompile-hook-与-compile-hook" aria-hidden="true">#</a> beforeCompile hook 与 compile hook</h2><p>beforeCompile hook 是 AsyncSeriesHook 类型。暂未发现有插件钩入这个 hook，这个 hook 的入参就是第一步生成的 <code>params</code>。</p><p>compile hook 是 SyncHook 类型。暂未发现有插件钩入这个 hook，这个 hook 的入参也是第一步生成的 <code>params</code>。</p><p>接着就是第三步——<strong>生成 compilation</strong>。</p><h2 id="this-newcompilation-params" tabindex="-1"><a class="header-anchor" href="#this-newcompilation-params" aria-hidden="true">#</a> this.newCompilation(params)</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">createCompilation</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compilation</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">newCompilation</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 生成 compilation</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createCompilation</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 文件的时间戳</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.fileTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileTimestamps;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// TODO</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.contextTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextTimestamps;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// compiler 的名称</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将 compiler的 records 赋值给 compilation</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compilation.compilationDependencies </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> params.compilationDependencies;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发 thisCompilation hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.thisCompilation.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compilation, params);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 触发 compilation hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.compilation.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compilation, params);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> compilation;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p><strong>compilation 代表一次构建，而 compiler 可以通过接口多次调用 compile 来生成多个 compilation 实例，在 watch 模式下，每次修改文件都会重复构建。</strong></p><ul><li><strong><code>1. hooks.thisCompilation</code></strong></li></ul>',16),p=(0,a.Uk)("钩入这个 hook 的插件有 "),e=(0,a.Uk)("JsonpTemplatePlugin"),t=(0,a.Uk)("，FetchCompileWasmTemplatePlugin(略过)，"),c=(0,a.Uk)("WarnNoModeSetPlugin"),r=(0,a.Uk)("，"),i=(0,a.Uk)("SplitChunksPlugin"),E=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,[(0,a.Wm)("code",null,"2. hooks.compilation")])],-1),u=(0,a.Wm)("p",null,"钩入这个 hook 的插件非常非常多。下面娓娓道来。",-1),m=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"FunctionModulePlugin")],-1),y=(0,a.Uk)("详细的请👇"),g=(0,a.Uk)("FunctionModulePlugin"),d=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"LoaderTargetPlugin")],-1),k=(0,a.Uk)("详细的请👇"),W=(0,a.Uk)("LoaderTargetPlugin"),F=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"JavascriptModulesPlugin")],-1),h=(0,a.Uk)("详细的请👇"),P=(0,a.Uk)("JavascriptModulesPlugin"),w=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"JsonModulesPlugin")],-1),f=(0,a.Uk)("详细的请👇"),b=(0,a.Uk)("JsonModulesPlugin"),U=(0,a.Wm)("li",null,[(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"WebAssemblyModulesPlugin")]),(0,a.Wm)("p",null,"略过。")],-1),C=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"SingleEntryPlugin")],-1),B=(0,a.Uk)("详细的请👇"),M=(0,a.Uk)("SingleEntryPlugin"),_=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"CompatibilityPlugin")],-1),x=(0,a.Uk)("详细的请👇"),D=(0,a.Uk)("CompatibilityPlugin"),v=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"HarmonyModulesPlugin")],-1),A=(0,a.Uk)("详细的请👇"),S=(0,a.Uk)("HarmonyModulesPlugin"),T=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"AMDPlugin")],-1),I=(0,a.Uk)("详细的请👇"),O=(0,a.Uk)("AMDPlugin"),R=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RequireJsStuffPlugin")],-1),J=(0,a.Uk)("详细的请👇"),j=(0,a.Uk)("RequireJsStuffPlugin"),q=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"CommonJsPlugin")],-1),z=(0,a.Uk)("详细的请👇"),N=(0,a.Uk)("CommonJsPlugin"),L=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"LoaderPlugin")],-1),H=(0,a.Uk)("详细的请👇"),Y=(0,a.Uk)("LoaderPlugin"),G=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"CommonJsStuffPlugin")],-1),K=(0,a.Uk)("详细的请👇"),Q=(0,a.Uk)("CommonJsStuffPlugin"),V=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"APIPlugin")],-1),X=(0,a.Uk)("详细的请👇"),Z=(0,a.Uk)("APIPlugin"),$=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"ConstPlugin")],-1),ll=(0,a.Uk)("详细的请👇"),nl=(0,a.Uk)("ConstPlugin"),sl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"UseStrictPlugin")],-1),al=(0,a.Uk)("详细的请👇"),ol=(0,a.Uk)("UseStrictPlugin"),pl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RequireIncludePlugin")],-1),el=(0,a.Uk)("详细的请👇"),tl=(0,a.Uk)("RequireIncludePlugin"),cl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RequireEnsurePlugin")],-1),rl=(0,a.Uk)("详细的请👇"),il=(0,a.Uk)("RequireEnsurePlugin"),El=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RequireContextPlugin")],-1),ul=(0,a.Uk)("详细的请👇"),ml=(0,a.Uk)("RequireContextPlugin"),yl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"ImportPlugin")],-1),gl=(0,a.Uk)("详细的请👇"),dl=(0,a.Uk)("ImportPlugin"),kl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"SystemPlugin")],-1),Wl=(0,a.Uk)("详细的请👇"),Fl=(0,a.Uk)("SystemPlugin"),hl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"EnsureChunkConditionsPlugin")],-1),Pl=(0,a.Uk)("详细的请👇"),wl=(0,a.Uk)("EnsureChunkConditionsPlugin"),fl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RemoveParentModulesPlugin")],-1),bl=(0,a.Uk)("详细的请👇"),Ul=(0,a.Uk)("RemoveParentModulesPlugin"),Cl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RemoveEmptyChunksPlugin")],-1),Bl=(0,a.Uk)("详细的请👇"),Ml=(0,a.Uk)("RemoveEmptyChunksPlugin"),_l=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"MergeDuplicateChunksPlugin")],-1),xl=(0,a.Uk)("详细的请👇"),Dl=(0,a.Uk)("MergeDuplicateChunksPlugin"),vl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"FlagIncludedChunksPlugin")],-1),Al=(0,a.Uk)("详细的请👇"),Sl=(0,a.Uk)("FlagIncludedChunksPlugin"),Tl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"SideEffectsFlagPlugin")],-1),Il=(0,a.Uk)("详细的请👇"),Ol=(0,a.Uk)("SideEffectsFlagPlugin"),Rl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"FlagDependencyExportsPlugin")],-1),Jl=(0,a.Uk)("详细的请👇"),jl=(0,a.Uk)("FlagDependencyExportsPlugin"),ql=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"FlagDependencyUsagePlugin")],-1),zl=(0,a.Uk)("详细的请👇"),Nl=(0,a.Uk)("FlagDependencyUsagePlugin"),Ll=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"ModuleConcatenationPlugin")],-1),Hl=(0,a.Uk)("详细的请👇"),Yl=(0,a.Uk)("ModuleConcatenationPlugin"),Gl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"NoEmitOnErrorsPlugin")],-1),Kl=(0,a.Uk)("详细的请👇"),Ql=(0,a.Uk)("NoEmitOnErrorsPlugin"),Vl=(0,a.Wm)("li",null,[(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"WasmFinalizeExportsPlugin")]),(0,a.Wm)("p",null,"略过。")],-1),Xl=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"OccurrenceOrderModuleIdsPlugin")],-1),Zl=(0,a.Uk)("详细的请👇"),$l=(0,a.Uk)("OccurrenceOrderModuleIdsPlugin"),ln=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"OccurrenceOrderChunkIdsPlugin")],-1),nn=(0,a.Uk)("详细的请👇"),sn=(0,a.Uk)("OccurrenceOrderChunkIdsPlugin"),an=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"DefinePlugin")],-1),on=(0,a.Uk)("详细的请👇"),pn=(0,a.Uk)("DefinePlugin"),en=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"TemplatedPathPlugin")],-1),tn=(0,a.Uk)("详细的请👇"),cn=(0,a.Uk)("TemplatedPathPlugin"),rn=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"RecordIdsPlugin")],-1),En=(0,a.Uk)("详细的请👇"),un=(0,a.Uk)("RecordIdsPlugin"),mn=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"WarnCaseSensitiveModulesPlugin")],-1),yn=(0,a.Uk)("详细的请👇"),gn=(0,a.Uk)("WarnCaseSensitiveModulesPlugin"),dn=(0,a.Wm)("p",null,[(0,a.Wm)("strong",null,"为什么要有 thisCompilation 与 compilation hook 呢，看起来合并成一个 hook 也不是不可以啊？")],-1),kn=(0,a.Uk)("在绝大多数情况下肯定是可以的，但是 webpack 的 Compiler 还有另外一种形态，那就是 "),Wn=(0,a.Uk)("childCompiler"),Fn=(0,a.Uk)("。childCompiler 不会复制 parentCompiler 上的 thisCompilation hook，也就是不会执行上述的 JsonpTemplatePlugin 等等插件。"),hn=(0,a.Uk)("第四步就是触发 make hook，这个 hook 代表构建过程从 entry 配置的文件开始，按照"),Pn=(0,a.Wm)("strong",null,"深度遍历",-1),wn=(0,a.Uk)("的顺序逐个解析出所有模块。整个流程的分析可以查询 "),fn=(0,a.Uk)("模块解析"),bn=(0,a.Uk)("这一章节。"),Un={render:function(l,n){const s=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[o,(0,a.Wm)("p",null,[p,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/jsonpChunkTemplate/JsonpTemplatePlugin.html"},{default:(0,a.w5)((()=>[e])),_:1}),t,(0,a.Wm)(s,{to:"/webpack4/configuration/mode.html"},{default:(0,a.w5)((()=>[c])),_:1}),r,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/splitChunks.html"},{default:(0,a.w5)((()=>[i])),_:1})]),(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[E,u,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[m,(0,a.Wm)("p",null,[y,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/FunctionModulePlugin.html"},{default:(0,a.w5)((()=>[g])),_:1})])]),(0,a.Wm)("li",null,[d,(0,a.Wm)("p",null,[k,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/LoaderTargetPlugin.html"},{default:(0,a.w5)((()=>[W])),_:1})])]),(0,a.Wm)("li",null,[F,(0,a.Wm)("p",null,[h,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/JavascriptModulesPlugin.html"},{default:(0,a.w5)((()=>[P])),_:1})])]),(0,a.Wm)("li",null,[w,(0,a.Wm)("p",null,[f,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/JsonModulesPlugin.html"},{default:(0,a.w5)((()=>[b])),_:1})])]),U,(0,a.Wm)("li",null,[C,(0,a.Wm)("p",null,[B,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/entry/SingleEntryPlugin.html"},{default:(0,a.w5)((()=>[M])),_:1})])]),(0,a.Wm)("li",null,[_,(0,a.Wm)("p",null,[x,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/CompatibilityPlugin.html"},{default:(0,a.w5)((()=>[D])),_:1})])]),(0,a.Wm)("li",null,[v,(0,a.Wm)("p",null,[A,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/HarmonyModulesPlugin.html"},{default:(0,a.w5)((()=>[S])),_:1})])]),(0,a.Wm)("li",null,[T,(0,a.Wm)("p",null,[I,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/AMDPlugin.html"},{default:(0,a.w5)((()=>[O])),_:1})])]),(0,a.Wm)("li",null,[R,(0,a.Wm)("p",null,[J,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/RequireJsStuffPlugin.html"},{default:(0,a.w5)((()=>[j])),_:1})])]),(0,a.Wm)("li",null,[q,(0,a.Wm)("p",null,[z,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/CommonJsPlugin.html"},{default:(0,a.w5)((()=>[N])),_:1})])]),(0,a.Wm)("li",null,[L,(0,a.Wm)("p",null,[H,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/LoaderPlugin.html"},{default:(0,a.w5)((()=>[Y])),_:1})])]),(0,a.Wm)("li",null,[G,(0,a.Wm)("p",null,[K,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/CommonJsStuffPlugin.html"},{default:(0,a.w5)((()=>[Q])),_:1})])]),(0,a.Wm)("li",null,[V,(0,a.Wm)("p",null,[X,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/APIPlugin.html"},{default:(0,a.w5)((()=>[Z])),_:1})])]),(0,a.Wm)("li",null,[$,(0,a.Wm)("p",null,[ll,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/ConstPlugin.html"},{default:(0,a.w5)((()=>[nl])),_:1})])]),(0,a.Wm)("li",null,[sl,(0,a.Wm)("p",null,[al,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/UseStrictPlugin.html"},{default:(0,a.w5)((()=>[ol])),_:1})])]),(0,a.Wm)("li",null,[pl,(0,a.Wm)("p",null,[el,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/RequireIncludePlugin.html"},{default:(0,a.w5)((()=>[tl])),_:1})])]),(0,a.Wm)("li",null,[cl,(0,a.Wm)("p",null,[rl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/RequireEnsurePlugin.html"},{default:(0,a.w5)((()=>[il])),_:1})])]),(0,a.Wm)("li",null,[El,(0,a.Wm)("p",null,[ul,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/RequireContextPlugin.html"},{default:(0,a.w5)((()=>[ml])),_:1})])]),(0,a.Wm)("li",null,[yl,(0,a.Wm)("p",null,[gl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/ImportPlugin.html"},{default:(0,a.w5)((()=>[dl])),_:1})])]),(0,a.Wm)("li",null,[kl,(0,a.Wm)("p",null,[Wl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/SystemPlugin.html"},{default:(0,a.w5)((()=>[Fl])),_:1})])]),(0,a.Wm)("li",null,[hl,(0,a.Wm)("p",null,[Pl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/EnsureChunkConditionsPlugin.html"},{default:(0,a.w5)((()=>[wl])),_:1})])]),(0,a.Wm)("li",null,[fl,(0,a.Wm)("p",null,[bl,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/removeAvailableModules.html"},{default:(0,a.w5)((()=>[Ul])),_:1})])]),(0,a.Wm)("li",null,[Cl,(0,a.Wm)("p",null,[Bl,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/removeEmptyChunks.html"},{default:(0,a.w5)((()=>[Ml])),_:1})])]),(0,a.Wm)("li",null,[_l,(0,a.Wm)("p",null,[xl,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/mergeDuplicateChunks.html"},{default:(0,a.w5)((()=>[Dl])),_:1})])]),(0,a.Wm)("li",null,[vl,(0,a.Wm)("p",null,[Al,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/flagIncludedChunks.html"},{default:(0,a.w5)((()=>[Sl])),_:1})])]),(0,a.Wm)("li",null,[Tl,(0,a.Wm)("p",null,[Il,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/SideEffectsFlagPlugin.html"},{default:(0,a.w5)((()=>[Ol])),_:1})])]),(0,a.Wm)("li",null,[Rl,(0,a.Wm)("p",null,[Jl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/FlagDependencyExportsPlugin.html"},{default:(0,a.w5)((()=>[jl])),_:1})])]),(0,a.Wm)("li",null,[ql,(0,a.Wm)("p",null,[zl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/FlagDependencyUsagePlugin.html"},{default:(0,a.w5)((()=>[Nl])),_:1})])]),(0,a.Wm)("li",null,[Ll,(0,a.Wm)("p",null,[Hl,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/ModuleConcatenationPlugin.html"},{default:(0,a.w5)((()=>[Yl])),_:1})])]),(0,a.Wm)("li",null,[Gl,(0,a.Wm)("p",null,[Kl,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/noEmitOnErrors.html"},{default:(0,a.w5)((()=>[Ql])),_:1})])]),Vl,(0,a.Wm)("li",null,[Xl,(0,a.Wm)("p",null,[Zl,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/namedModules&moduleIds&occurrenceOrder&hashedModuleIds.html"},{default:(0,a.w5)((()=>[$l])),_:1})])]),(0,a.Wm)("li",null,[ln,(0,a.Wm)("p",null,[nn,(0,a.Wm)(s,{to:"/webpack4/configuration/optimization/namedChunks&chunkIds&occurrenceOrder.html"},{default:(0,a.w5)((()=>[sn])),_:1})])]),(0,a.Wm)("li",null,[an,(0,a.Wm)("p",null,[on,(0,a.Wm)(s,{to:"/webpack4/internal-plugins/DefinePlugin.html"},{default:(0,a.w5)((()=>[pn])),_:1})])]),(0,a.Wm)("li",null,[en,(0,a.Wm)("p",null,[tn,(0,a.Wm)(s,{to:"/webpack4/webpack-process/TemplatedPathPlugin.html"},{default:(0,a.w5)((()=>[cn])),_:1})])]),(0,a.Wm)("li",null,[rn,(0,a.Wm)("p",null,[En,(0,a.Wm)(s,{to:"/webpack4/configuration/recordsPath&recordsInputPath&recordsOutputPath.html"},{default:(0,a.w5)((()=>[un])),_:1})])]),(0,a.Wm)("li",null,[mn,(0,a.Wm)("p",null,[yn,(0,a.Wm)(s,{to:"/webpack4/webpack-process/WarnCaseSensitiveModulesPlugin.html"},{default:(0,a.w5)((()=>[gn])),_:1})])])])])]),dn,(0,a.Wm)("p",null,[kn,(0,a.Wm)(s,{to:"/webpack4/internal-class/childCompiler.html"},{default:(0,a.w5)((()=>[Wn])),_:1}),Fn]),(0,a.Wm)("p",null,[hn,Pn,wn,(0,a.Wm)(s,{to:"/webpack4/webpack-process/compiling-modules.html"},{default:(0,a.w5)((()=>[fn])),_:1}),bn])],64)}}}}]);