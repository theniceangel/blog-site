(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[2764],{6290:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-7511e63e",path:"/webpack4/webpack-process/new-compiler.html",title:"处理 compiler",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"new Compiler",slug:"new-compiler",children:[]},{level:2,title:"调用 userPlugins, innerPlugins",slug:"调用-userplugins-innerplugins",children:[]}],filePathRelative:"webpack4/webpack-process/new-compiler.md",git:{updatedTime:162722505e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},5932:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>C});var l=a(6252);const p=(0,l.Wm)("h1",{id:"处理-compiler",tabindex:"-1"},[(0,l.Wm)("a",{class:"header-anchor",href:"#处理-compiler","aria-hidden":"true"},"#"),(0,l.Uk)(" 处理 compiler")],-1),o=(0,l.Uk)("经过 "),e=(0,l.Uk)("options 的处理"),E=(0,l.Uk)("之后，接着开始实例化 Compiler。"),t=(0,l.uE)('<h2 id="new-compiler" tabindex="-1"><a class="header-anchor" href="#new-compiler" aria-hidden="true">#</a> new Compiler</h2><details class="custom-container details"><summary>webpack.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> compiler;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(options)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MultiCompiler</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(options).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpack</span><span style="color:#E1E4E8;">(options))</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;object&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsDefaulter</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(options);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;">(options.context);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 先省略其他逻辑</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span></code></pre></div></details><p>webpack 支持传入一个数组来开启多个 compiler，不过暂时先看单个 compiler 的构建过程。</p><details class="custom-container details"><summary>Compiler.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tapable</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      shouldEmit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      done: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;stats&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      additionalPass: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      beforeRun: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      run: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      emit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      assetEmitted: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;file&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      afterEmit: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      thisCompilation: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      normalModuleFactory: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;normalModuleFactory&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      contextModuleFactory: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;contextModulefactory&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      beforeCompile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      make: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncParallelHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      afterCompile: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compilation&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      watchRun: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncSeriesHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      failed: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      invalid: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;filename&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;changeTime&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      watchClose: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      infrastructureLog: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;origin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;args&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      environment: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      afterEnvironment: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      afterPlugins: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      afterResolvers: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;compiler&quot;</span><span style="color:#E1E4E8;">]),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      entryOption: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncBailHook</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;context&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;entry&quot;</span><span style="color:#E1E4E8;">])</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.infrastructurelog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.hooks.infrastructureLog;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 兼容 webpack 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._pluginCompat.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Compiler&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (options.name) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;additional-pass&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;before-run&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;run&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;emit&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;after-emit&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;before-compile&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;make&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;after-compile&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;watch-run&quot;</span><span style="color:#E1E4E8;">:</span></span>\n<span class="line"><span style="color:#E1E4E8;">          options.async </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.parentCompilation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.outputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.inputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsInputPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.recordsOutputPath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.records </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.removedFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.fileTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.contextTimestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ResolverFactory</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.infrastructureLogger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 兼容 webpack 3</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolvers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      normal: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        plugins: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver normal&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(hook, fn);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.normal is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver normal&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.plugin(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        apply: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver normal&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.normal is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver normal&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.apply(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      loader: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        plugins: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver loader&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(hook, fn);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.loader is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver loader&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.plugin(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        apply: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver loader&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.loader is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver loader&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.apply(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      },</span></span>\n<span class="line"><span style="color:#E1E4E8;">      context: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        plugins: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver context&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(hook, fn);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.context is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver context&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.plugin(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">        apply: util.</span><span style="color:#B392F0;">deprecate</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resolverFactory.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;resolver context&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resolver</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            resolver.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>\n<span class="line"><span style="color:#E1E4E8;">          });</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, </span><span style="color:#9ECBFF;">&quot;webpack: Using compiler.resolvers.context is deprecated.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Use compiler.resolverFactory.plugin(&quot;resolver context&quot;, resolver =&gt; {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  resolver.apply(/* … */);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}); instead.&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ({});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.requestShortener </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RequestShortener</span><span style="color:#E1E4E8;">(context);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.running </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.watchMode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._assetEmittingSourceCache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WeakMap</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._assetEmittingWrittenFiles </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Map</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div></details><p>// TODO 补一篇 Tapable 的文章分析</p><p>Compiler 继承 Tapable 类，上面放了许多 hooks，不过先不要陷入进去，要不然容易头晕，实例化 Compiler 的时候传入了 <code>context</code>，它代表 Compiler 的工作路径，默认为<strong>运行 wenpack 命令所在的路径</strong>，用户也可以手动指定，这个路径<strong>非常关键</strong>，后期经常使用。</p><h2 id="调用-userplugins-innerplugins" tabindex="-1"><a class="header-anchor" href="#调用-userplugins-innerplugins" aria-hidden="true">#</a> 调用 userPlugins, innerPlugins</h2><p>接着开始启动 Compiler，先执行用户传入的 plugins，再执行 webpack 内部的 plugins。这个顺序也很重要，<strong>可能影响 webpack 某些插件的逻辑</strong>，这个跟 Tapable Hooks 的种类有关系。</p><details class="custom-container details"><summary>webpack.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// ... 省略其他</span></span>\n<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeEnvironmentPlugin</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">  infrastructureLogging: options.infrastructureLogging</span></span>\n<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#6A737D;">// 先执行 options.plugins</span></span>\n<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.plugins </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(options.plugins)) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> options.plugins) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> plugin </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      plugin.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(compiler, compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      plugin.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(compiler);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">compiler.hooks.environment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">// WatchIgnorePlugin 使用了 afterEnvironment hook</span></span>\n<span class="line"><span style="color:#E1E4E8;">compiler.hooks.afterEnvironment.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#6A737D;">// 接着执行 webpack 内部的 plugins</span></span>\n<span class="line"><span style="color:#E1E4E8;">compiler.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebpackOptionsApply</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">process</span><span style="color:#E1E4E8;">(options, compiler);</span></span>\n<span class="line"></span></code></pre></div></details><p>先看下 <code>NodeEnvironmentPlugin</code> 的功能，主要是给 compiler 赋能一些 Node 有关的能力，</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeEnvironmentPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 创建 infrastructureLogger</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.infrastructureLogger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createConsoleLogger</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">          level: </span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          debug: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">          console: nodeConsole</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.infrastructureLogging</span></span>\n<span class="line"><span style="color:#E1E4E8;">      )</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 提供关于文件系统的实例</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.inputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CachedInputFileSystem</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeJsInputFileSystem</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">60000</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputFileSystem</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compiler.inputFileSystem;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.outputFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeOutputFileSystem</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.watchFileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeWatchFileSystem</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compiler.inputFileSystem</span></span>\n<span class="line"><span style="color:#E1E4E8;">    );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// watch 模式下，每次重新构建都销毁 inputFileSystem 内部的数据</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.beforeRun.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NodeEnvironmentPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (compiler.inputFileSystem </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> inputFileSystem) inputFileSystem.</span><span style="color:#B392F0;">purge</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div>',11),c=(0,l.Uk)("想要了解 "),r=(0,l.Wm)("code",null,"compiler.infrastructureLogger",-1),y=(0,l.Uk)(" 的细节，可以看 "),i=(0,l.Uk)("infrastructureLogging 配置项"),F=(0,l.Uk)(" 这篇文章。"),u=(0,l.Wm)("p",null,"// TODO webpack FileSystem 分析",-1),B=(0,l.Uk)("接下来执行用户传入的 plugins，关于 plugin 的详细介绍可以看"),m=(0,l.Uk)("这篇"),g=(0,l.Uk)("，再接着走进 wepack 处理 "),d=(0,l.Uk)("inner-plugins"),q=(0,l.Uk)(" 的逻辑，webpack 内部的插件非常多，不同的 target，不同的 mode 使用的插件也不尽相同。"),C={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("p",null,[o,(0,l.Wm)(a,{to:"/webpack4/webpack-process/handle-options.html"},{default:(0,l.w5)((()=>[e])),_:1}),E]),t,(0,l.Wm)("p",null,[c,r,y,(0,l.Wm)(a,{to:"/webpack4/configuration/infrastructureLogging.html"},{default:(0,l.w5)((()=>[i])),_:1}),F]),u,(0,l.Wm)("p",null,[B,(0,l.Wm)(a,{to:"/webpack4/configuration/plugins/startup.html"},{default:(0,l.w5)((()=>[m])),_:1}),g,(0,l.Wm)(a,{to:"/webpack4/webpack-process/inner-plugins.html"},{default:(0,l.w5)((()=>[d])),_:1}),q])],64)}}}}]);