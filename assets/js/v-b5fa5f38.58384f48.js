(self.webpackChunkblog_site=self.webpackChunkblog_site||[]).push([[7851],{1236:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>l});const l={key:"v-b5fa5f38",path:"/webpack4/configuration/optimization/removeEmptyChunks.html",title:"removeEmptyChunks",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"核心逻辑",slug:"核心逻辑",children:[]},{level:2,title:"handler",slug:"handler",children:[]}],filePathRelative:"webpack4/configuration/optimization/removeEmptyChunks.md",git:{updatedTime:162722505e4,contributors:[{name:"jizhi",email:"jizhi@didiglobal.com",commits:1}]}}},7238:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>h});var l=a(6252);const p=(0,l.uE)('<h1 id="removeemptychunks" tabindex="-1"><a class="header-anchor" href="#removeemptychunks" aria-hidden="true">#</a> removeEmptyChunks</h1><p>RemoveEmptyChunksPlugin 的作用是用来去除 empty chunks，否则你会发现打包出了若干没有任何代码的文件，什么时候会产出 empty chunk 呢？</p><h2 id="核心逻辑" tabindex="-1"><a class="header-anchor" href="#核心逻辑" aria-hidden="true">#</a> 核心逻辑</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RemoveEmptyChunksPlugin</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;RemoveEmptyChunksPlugin&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>\n<span class="line"><span style="color:#E1E4E8;">      };</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.optimizeChunksBasic.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RemoveEmptyChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        handler</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.optimizeChunksAdvanced.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RemoveEmptyChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        handler</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.optimizeExtractedChunksBasic.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RemoveEmptyChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        handler</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">      compilation.hooks.optimizeExtractedChunksAdvanced.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;RemoveEmptyChunksPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        handler</span></span>\n<span class="line"><span style="color:#E1E4E8;">      );</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>插件利用的是 compilation 上的 <code>optimizeChunksBasic</code>、<code>optimizeChunksAdvanced</code>、<code>optimizeExtractedChunksBasic</code>、<code>optimizeExtractedChunksAdvanced</code> 四个钩子，它们都是在 compilation.seal 阶段才会触发，这几个钩子的回调函数内部都会生成 newChunk，所以得多次触发 handler 内部的移除逻辑。</p><h2 id="handler" tabindex="-1"><a class="header-anchor" href="#handler" aria-hidden="true">#</a> handler</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunks</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunks.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chunk</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunks[i];</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.</span><span style="color:#B392F0;">hasRuntime</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunk.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;empty&quot;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">      chunks.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(i, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Chunk</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryModule;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>handler 内部遍历所有的 chunks，移除 chunk 的条件必须同时满足以下三个：</p>',8),o=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,"chunk 没有含有任何的 module；")],-1),e=(0,l.Uk)("chunk 不能是含有 webpack 的 runtime bootstrap code，"),c=(0,l.Uk)("什么是 runtime code"),E=(0,l.Uk)("，这种 chunk 自然不能移除；"),t=(0,l.Wm)("li",null,[(0,l.Wm)("p",null,"chunk 不能含有 entry module，")],-1),r=(0,l.Uk)("要想完全理解为什么，建议先阅读 "),y=(0,l.Uk)("splitChunks"),i=(0,l.Uk)(" 和 "),u=(0,l.Uk)("runtimeChunk"),d=(0,l.Uk)("。"),F=(0,l.uE)('<p>对于第三点很疑惑，既然 chunk 都是空的，为啥还能包含 entry module 呢？首先来看 Chunk 的结构。</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Chunk</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// webpack 配置的入口模块</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Module=}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当前 chunk 的所有 modules 依赖，包含了 entryModule</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 也就是从入口模块递归解析而来的所有模块(前提是不使用 splitChunksPlugin 等插件)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@private</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{SortableSet&lt;Module&gt;}</span><span style="color:#6A737D;"> */</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SortableSet</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, sortByIdentifier);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._modules.size </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>但是如果使用了 splitChunksPlugin，是可以做到去除 this._modules 的 entryModule，但是不会清空 chunk.entryModule，因为在 chunk 生成代码过程是严重依赖 chunk.entryModule。比如下面这个场景：</p><details class="custom-container details"><summary>index.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"></span></code></pre></div></details><details class="custom-container details"><summary>webpack.config.js</summary><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  context: __dirname,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    minimize: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    runtimeChunk: </span><span style="color:#9ECBFF;">&#39;single&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 必不可少</span></span>\n<span class="line"><span style="color:#E1E4E8;">    splitChunks: { </span></span>\n<span class="line"><span style="color:#E1E4E8;">      minSize: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        default: { </span><span style="color:#6A737D;">// 必不可少</span></span>\n<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            priority: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            chunks: </span><span style="color:#9ECBFF;">&#39;initial&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">      }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">  },</span></span>\n<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;dist&quot;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;[name].js&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span>\n<span class="line"></span></code></pre></div></details><p>webpack 打包后会生成 <code>main.js</code>、<code>default~main.js</code>、<code>runtime.js</code>，其中对应生成 <code>main.js</code> 的 main chunk 原本是如下的结构：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">chunk._modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [index.js 模块]</span></span>\n<span class="line"><span style="color:#E1E4E8;">chunk.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index.js 模块</span></span>\n<span class="line"></span></code></pre></div><p>但是由于 splitChunks.cacheGroups 的 default 分组原因，会把 index.js 模块抽离到 <code>default~main.js</code> 对应的 chunk，所以 main.chunk 就变成了如下的结构：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#E1E4E8;">chunk._modules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>\n<span class="line"><span style="color:#E1E4E8;">chunk.entryModule </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> index.js 模块</span></span>\n<span class="line"></span></code></pre></div><p>而且本来 main.chunk 是 runtime Chunk，由于配置了 runtime: &#39;single&#39;，它就被降级了，<code>runtime.js</code> 变成了 runtime chunk 打出来的包，因此如果 RemoveEmptyChunksPlugin 没有如下的判断，会导致 <code>main.js</code> 被忽略</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">chunk.</span><span style="color:#B392F0;">hasEntryModule</span><span style="color:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//..</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span>\n<span class="line"></span></code></pre></div><p>为什么 <code>main.js</code> 不能被移除呢， <strong>其实是因为 runtime.js 要连接 main.js</strong>， 在 <code>main.js</code> 里面有这么一段代码：</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#24292e;"><code><span class="line"><span style="color:#6A737D;">// main.js</span></span>\n<span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">],[],[[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]]]);</span></span>\n<span class="line"></span></code></pre></div><p>push 的数组参数的第三个元素 [0, 2, 0]，是要被 <code>runtime.js</code> 的 <code>webpackJsonpCallback</code> 消费的，因为这个是程序的启动入口，而 <code>main.js</code> 的代码生成，也就是 [0, 2, 0] 必须依赖 mainChunk.entryModule 信息，代表着 runtime.js 的程序入口。</p>',14),h={render:function(s,n){const a=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.j4)(l.HY,null,[p,(0,l.Wm)("ol",null,[o,(0,l.Wm)("li",null,[(0,l.Wm)("p",null,[e,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/runtimeChunk.html"},{default:(0,l.w5)((()=>[c])),_:1}),E])]),t]),(0,l.Wm)("blockquote",null,[(0,l.Wm)("p",null,[r,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/'./splitChunks.html"},{default:(0,l.w5)((()=>[y])),_:1}),i,(0,l.Wm)(a,{to:"/webpack4/configuration/optimization/'./runtimeChunk.html"},{default:(0,l.w5)((()=>[u])),_:1}),d])]),F],64)}}}}]);